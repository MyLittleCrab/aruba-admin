import { Client as SoapClient, createClientAsync as soapCreateClientAsync, IExOptions as ISoapExOptions } from "soap";
import { GetLoadBalancerLoads } from "./definitions/GetLoadBalancerLoads";
import { GetLoadBalancerLoadsResponse } from "./definitions/GetLoadBalancerLoadsResponse";
import { GetLoadBalancerRuleStatistics } from "./definitions/GetLoadBalancerRuleStatistics";
import { GetLoadBalancerRuleStatisticsResponse } from "./definitions/GetLoadBalancerRuleStatisticsResponse";
import { SetEnqueueLoadBalancerPowerOff } from "./definitions/SetEnqueueLoadBalancerPowerOff";
import { SetEnqueueLoadBalancerPowerOffResponse } from "./definitions/SetEnqueueLoadBalancerPowerOffResponse";
import { GetLoadBalancerNotifications } from "./definitions/GetLoadBalancerNotifications";
import { GetLoadBalancerNotificationsResponse } from "./definitions/GetLoadBalancerNotificationsResponse";
import { SetEnqueueLoadBalancerStart } from "./definitions/SetEnqueueLoadBalancerStart";
import { SetEnqueueLoadBalancerStartResponse } from "./definitions/SetEnqueueLoadBalancerStartResponse";
import { SetAddLoadBalancerContacts } from "./definitions/SetAddLoadBalancerContacts";
import { SetAddLoadBalancerContactsResponse } from "./definitions/SetAddLoadBalancerContactsResponse";
import { SetRemoveLoadBalancerContacts } from "./definitions/SetRemoveLoadBalancerContacts";
import { SetRemoveLoadBalancerContactsResponse } from "./definitions/SetRemoveLoadBalancerContactsResponse";
import { SetEnqueueLoadBalancerAddInstances } from "./definitions/SetEnqueueLoadBalancerAddInstances";
import { SetEnqueueLoadBalancerAddInstancesResponse } from "./definitions/SetEnqueueLoadBalancerAddInstancesResponse";
import { SetEnqueueLoadBalancerRemoveInstances } from "./definitions/SetEnqueueLoadBalancerRemoveInstances";
import { SetEnqueueLoadBalancerRemoveInstancesResponse } from "./definitions/SetEnqueueLoadBalancerRemoveInstancesResponse";
import { SetModifyLoadBalancer } from "./definitions/SetModifyLoadBalancer";
import { SetModifyLoadBalancerResponse } from "./definitions/SetModifyLoadBalancerResponse";
import { SetAddLoadBalancerRule } from "./definitions/SetAddLoadBalancerRule";
import { SetAddLoadBalancerRuleResponse } from "./definitions/SetAddLoadBalancerRuleResponse";
import { SetRemoveLoadBalancerRule } from "./definitions/SetRemoveLoadBalancerRule";
import { SetRemoveLoadBalancerRuleResponse } from "./definitions/SetRemoveLoadBalancerRuleResponse";
import { IWsEndUserSetEnqueueReinitializeLoadBalancerOutputMessage } from "./definitions/IWsEndUserSetEnqueueReinitializeLoadBalancerOutputMessage";
import { GetPreConfiguredPackages } from "./definitions/GetPreConfiguredPackages";
import { GetPreConfiguredPackagesResponse } from "./definitions/GetPreConfiguredPackagesResponse";
import { IWsEndUserGetAdditionalIpServicesOutputMessage } from "./definitions/IWsEndUserGetAdditionalIpServicesOutputMessage";
import { SetEnqueueReinitializeServer } from "./definitions/SetEnqueueReinitializeServer";
import { SetEnqueueReinitializeServerResponse } from "./definitions/SetEnqueueReinitializeServerResponse";
import { GetAllCloudIpAddresses } from "./definitions/GetAllCloudIpAddresses";
import { GetAllCloudIpAddressesResponse } from "./definitions/GetAllCloudIpAddressesResponse";
import { SetEnqueueSetReverseDns } from "./definitions/SetEnqueueSetReverseDns";
import { SetEnqueueSetReverseDnsResponse } from "./definitions/SetEnqueueSetReverseDnsResponse";
import { SetEnqueueResetReverseDns } from "./definitions/SetEnqueueResetReverseDns";
import { SetEnqueueResetReverseDnsResponse } from "./definitions/SetEnqueueResetReverseDnsResponse";
import { GetReverseDns } from "./definitions/GetReverseDns";
import { GetReverseDnsResponse } from "./definitions/GetReverseDnsResponse";
import { IWsEndUserIsLuckySmartAvailableOutputMessage } from "./definitions/IWsEndUserIsLuckySmartAvailableOutputMessage";
import { IWsEndUserGetLastSoldOutSettingItemListOutputMessage } from "./definitions/IWsEndUserGetLastSoldOutSettingItemListOutputMessage";
import { IWsEndUserGetHybridLinksOutputMessage } from "./definitions/IWsEndUserGetHybridLinksOutputMessage";
import { IWsEndUserGetHybridLinksPricingTypesOutputMessage } from "./definitions/IWsEndUserGetHybridLinksPricingTypesOutputMessage";
import { IWsEndUserSetEnqueueCreateHybridLinkOutputMessage } from "./definitions/IWsEndUserSetEnqueueCreateHybridLinkOutputMessage";
import { IWsEndUserSetEnqueueDeleteHybridLinkOutputMessage } from "./definitions/IWsEndUserSetEnqueueDeleteHybridLinkOutputMessage";
import { IWsEndUserGetPurchasedPrivateCloudsBaseOutputMessage } from "./definitions/IWsEndUserGetPurchasedPrivateCloudsBaseOutputMessage";
import { IWsEndUserGetCountriesOutputMessage } from "./definitions/IWsEndUserGetCountriesOutputMessage";
import { IWsEndUserGetSharedStoragePricingTypesOutputMessage } from "./definitions/IWsEndUserGetSharedStoragePricingTypesOutputMessage";
import { IWsEndUserGetSharedStorageDetailsOutputMessage } from "./definitions/IWsEndUserGetSharedStorageDetailsOutputMessage";
import { IWsEndUserRenameHybridLinkOutputMessage } from "./definitions/IWsEndUserRenameHybridLinkOutputMessage";
import { IWsEndUserPlannedChangePrivateCloudWindowsLicenseDeletionOutputMessage } from "./definitions/IWsEndUserPlannedChangePrivateCloudWindowsLicenseDeletionOutputMessage";
import { IWsEndUserPlannedChangePrivateCloudLicenseDeletionOutputMessage } from "./definitions/IWsEndUserPlannedChangePrivateCloudLicenseDeletionOutputMessage";
import { IWsEndUserChangePrivateCloudPasswordOutputMessage } from "./definitions/IWsEndUserChangePrivateCloudPasswordOutputMessage";
import { IWsEndUserChangeZertoPasswordOutputMessage } from "./definitions/IWsEndUserChangeZertoPasswordOutputMessage";
import { IWsEndUserGetVirtualMachinePricingTypesOutputMessage } from "./definitions/IWsEndUserGetVirtualMachinePricingTypesOutputMessage";
import { IWsEndUserSetEnqueueModifyVirtualMachinePackageOutputMessage } from "./definitions/IWsEndUserSetEnqueueModifyVirtualMachinePackageOutputMessage";
import { IWsEndUserServerPlannedChangeDeletionOutputMessage } from "./definitions/IWsEndUserServerPlannedChangeDeletionOutputMessage";
import { IWsEndUserGetHypervisorTemplatesPriorityOutputMessage } from "./definitions/IWsEndUserGetHypervisorTemplatesPriorityOutputMessage";
import { IWsEndUserGetHypervisorTemplatesOutputMessage } from "./definitions/IWsEndUserGetHypervisorTemplatesOutputMessage";
import { IWsEndUserGetHypervisorTemplateDetailsOutputMessage } from "./definitions/IWsEndUserGetHypervisorTemplateDetailsOutputMessage";
import { IWsEndUserGetPrivateCloudPricingTypesOutputMessage } from "./definitions/IWsEndUserGetPrivateCloudPricingTypesOutputMessage";
import { IWsEndUserGetPrivateCloudResourcesOutputMessage } from "./definitions/IWsEndUserGetPrivateCloudResourcesOutputMessage";
import { IWsEndUserGetPrivateCloudCustomProductsOutputMessage } from "./definitions/IWsEndUserGetPrivateCloudCustomProductsOutputMessage";
import { IWsEndUserGetPublicVLanForUserOutputMessage } from "./definitions/IWsEndUserGetPublicVLanForUserOutputMessage";
import { IWsEndUserManageIpOutputMessage } from "./definitions/IWsEndUserManageIpOutputMessage";
import { IWsEndUserGetPrivateCloudNamingBlacklistsOutputMessage } from "./definitions/IWsEndUserGetPrivateCloudNamingBlacklistsOutputMessage";
import { IWsEndUserCancelDeleteVirtualMachineOutputMessage } from "./definitions/IWsEndUserCancelDeleteVirtualMachineOutputMessage";
import { IWsEndUserCreateVpcUserOutputMessage } from "./definitions/IWsEndUserCreateVpcUserOutputMessage";
import { IWsEndUserGetVpcUsersOutputMessage } from "./definitions/IWsEndUserGetVpcUsersOutputMessage";
import { IWsEndUserRequestVpcUserOtpTokenOutputMessage } from "./definitions/IWsEndUserRequestVpcUserOtpTokenOutputMessage";
import { IWsEndUserSetVpcOtpStatusOutputMessage } from "./definitions/IWsEndUserSetVpcOtpStatusOutputMessage";
import { IWsEndUserResetVpcUserPasswordOutputMessage } from "./definitions/IWsEndUserResetVpcUserPasswordOutputMessage";
import { IWsEndUserDeleteVpcUserOutputMessage } from "./definitions/IWsEndUserDeleteVpcUserOutputMessage";
import { IWsEndUserVerifyVpcUserOtpOutputMessage } from "./definitions/IWsEndUserVerifyVpcUserOtpOutputMessage";
import { IWsEndUserGetVpcRolesOutputMessage } from "./definitions/IWsEndUserGetVpcRolesOutputMessage";
import { IWsEndUserUpdateVpcUserOutputMessage } from "./definitions/IWsEndUserUpdateVpcUserOutputMessage";
import { IWsEndUserSyncVpcUserOtpTokenOutputMessage } from "./definitions/IWsEndUserSyncVpcUserOtpTokenOutputMessage";
import { IWsEndUserRemoveOldIpFromVpsOutputMessage } from "./definitions/IWsEndUserRemoveOldIpFromVpsOutputMessage";
import { GetUserAuthenticationToken } from "./definitions/GetUserAuthenticationToken";
import { GetUserAuthenticationTokenResponse } from "./definitions/GetUserAuthenticationTokenResponse";
import { GetCompanyByUrl } from "./definitions/GetCompanyByUrl";
import { GetCompanyByUrlResponse } from "./definitions/GetCompanyByUrlResponse";
import { GetHypervisorTypes } from "./definitions/GetHypervisorTypes";
import { GetHypervisorTypesResponse } from "./definitions/GetHypervisorTypesResponse";
import { GetHypervisors } from "./definitions/GetHypervisors";
import { GetHypervisorsResponse } from "./definitions/GetHypervisorsResponse";
import { IWsEndUserGetApplianceTypesOutputMessage } from "./definitions/IWsEndUserGetApplianceTypesOutputMessage";
import { IWsEndUserGetAllTagsOutputMessage } from "./definitions/IWsEndUserGetAllTagsOutputMessage";
import { GetHypervisorDetails } from "./definitions/GetHypervisorDetails";
import { GetHypervisorDetailsResponse } from "./definitions/GetHypervisorDetailsResponse";
import { GetVirtualDatacenter } from "./definitions/GetVirtualDatacenter";
import { GetVirtualDatacenterResponse } from "./definitions/GetVirtualDatacenterResponse";
import { GetVirtualDatacenterCost } from "./definitions/GetVirtualDatacenterCost";
import { GetVirtualDatacenterCostResponse } from "./definitions/GetVirtualDatacenterCostResponse";
import { GetServers } from "./definitions/GetServers";
import { GetServersResponse } from "./definitions/GetServersResponse";
import { IWsEndUserGetServersListOutputMessage } from "./definitions/IWsEndUserGetServersListOutputMessage";
import { IWsEndUserGetPagedServersListOutputMessage } from "./definitions/IWsEndUserGetPagedServersListOutputMessage";
import { GetServerDetails } from "./definitions/GetServerDetails";
import { GetServerDetailsResponse } from "./definitions/GetServerDetailsResponse";
import { GetCredit } from "./definitions/GetCredit";
import { GetCreditResponse } from "./definitions/GetCreditResponse";
import { GetPriceList } from "./definitions/GetPriceList";
import { GetPriceListResponse } from "./definitions/GetPriceListResponse";
import { GetPurchasedVLans } from "./definitions/GetPurchasedVLans";
import { GetPurchasedVLansResponse } from "./definitions/GetPurchasedVLansResponse";
import { GetPurchasedIpAddresses } from "./definitions/GetPurchasedIpAddresses";
import { GetPurchasedIpAddressesResponse } from "./definitions/GetPurchasedIpAddressesResponse";
import { IWsEndUserGetOpenStackFlavorsOutputMessage } from "./definitions/IWsEndUserGetOpenStackFlavorsOutputMessage";
import { GetJobs } from "./definitions/GetJobs";
import { GetJobsResponse } from "./definitions/GetJobsResponse";
import { GetLogs } from "./definitions/GetLogs";
import { GetLogsResponse } from "./definitions/GetLogsResponse";
import { IWsEndUserGetOperationsLogOutputMessage } from "./definitions/IWsEndUserGetOperationsLogOutputMessage";
import { GetDatacenterConfigurations } from "./definitions/GetDatacenterConfigurations";
import { GetDatacenterConfigurationsResponse } from "./definitions/GetDatacenterConfigurationsResponse";
import { GetCustomVirtualDisks } from "./definitions/GetCustomVirtualDisks";
import { GetCustomVirtualDisksResponse } from "./definitions/GetCustomVirtualDisksResponse";
import { GetIsos } from "./definitions/GetIsos";
import { GetIsosResponse } from "./definitions/GetIsosResponse";
import { GetUserInfo } from "./definitions/GetUserInfo";
import { GetUserInfoResponse } from "./definitions/GetUserInfoResponse";
import { GetPurchasedFtp } from "./definitions/GetPurchasedFtp";
import { GetPurchasedFtpResponse } from "./definitions/GetPurchasedFtpResponse";
import { GetNews } from "./definitions/GetNews";
import { GetNewsResponse } from "./definitions/GetNewsResponse";
import { GetScheduledOperations } from "./definitions/GetScheduledOperations";
import { GetScheduledOperationsResponse } from "./definitions/GetScheduledOperationsResponse";
import { GetServerSchedulesLogs } from "./definitions/GetServerSchedulesLogs";
import { GetServerSchedulesLogsResponse } from "./definitions/GetServerSchedulesLogsResponse";
import { GetSchedulerDataTypes } from "./definitions/GetSchedulerDataTypes";
import { GetSchedulerDataTypesResponse } from "./definitions/GetSchedulerDataTypesResponse";
import { GetTemplateDetails } from "./definitions/GetTemplateDetails";
import { GetTemplateDetailsResponse } from "./definitions/GetTemplateDetailsResponse";
import { GetTemplateCategories } from "./definitions/GetTemplateCategories";
import { GetTemplateCategoriesResponse } from "./definitions/GetTemplateCategoriesResponse";
import { IWsEndUserGetTemplateLicensesOutputMessage } from "./definitions/IWsEndUserGetTemplateLicensesOutputMessage";
import { GetAvailablePersonalTemplates } from "./definitions/GetAvailablePersonalTemplates";
import { GetAvailablePersonalTemplatesResponse } from "./definitions/GetAvailablePersonalTemplatesResponse";
import { GetSystemStatusHistory } from "./definitions/GetSystemStatusHistory";
import { GetSystemStatusHistoryResponse } from "./definitions/GetSystemStatusHistoryResponse";
import { GetSharedStorages } from "./definitions/GetSharedStorages";
import { GetSharedStoragesResponse } from "./definitions/GetSharedStoragesResponse";
import { GetAdditionalServices } from "./definitions/GetAdditionalServices";
import { GetAdditionalServicesResponse } from "./definitions/GetAdditionalServicesResponse";
import { GetPurchasedAdditionalServices } from "./definitions/GetPurchasedAdditionalServices";
import { GetPurchasedAdditionalServicesResponse } from "./definitions/GetPurchasedAdditionalServicesResponse";
import { GetRemoteAccessUrl } from "./definitions/GetRemoteAccessUrl";
import { GetRemoteAccessUrlResponse } from "./definitions/GetRemoteAccessUrlResponse";
import { IWsEndUserGetRemoteAccessUrlExOutputMessage } from "./definitions/IWsEndUserGetRemoteAccessUrlExOutputMessage";
import { IWsEndUserGetRemoteAccessUrlAsyncResponseOutputMessage } from "./definitions/IWsEndUserGetRemoteAccessUrlAsyncResponseOutputMessage";
import { IWsEndUserGetVmPerformanceOutputMessage } from "./definitions/IWsEndUserGetVmPerformanceOutputMessage";
import { IWsEndUserGetVmPerformancesOutputMessage } from "./definitions/IWsEndUserGetVmPerformancesOutputMessage";
import { IWsEndUserGetVmMetricsOutputMessage } from "./definitions/IWsEndUserGetVmMetricsOutputMessage";
import { IWsEndUserGetVirtualMachineCostOutputMessage } from "./definitions/IWsEndUserGetVirtualMachineCostOutputMessage";
import { IWsEndUserGetVirtualMachineResourcesProductsOutputMessage } from "./definitions/IWsEndUserGetVirtualMachineResourcesProductsOutputMessage";
import { CheckEnqueueServerCreation } from "./definitions/CheckEnqueueServerCreation";
import { CheckEnqueueServerCreationResponse } from "./definitions/CheckEnqueueServerCreationResponse";
import { SetEnqueueServerCreation } from "./definitions/SetEnqueueServerCreation";
import { SetEnqueueServerCreationResponse } from "./definitions/SetEnqueueServerCreationResponse";
import { IWsEndUserSetEnqueueServerCreationExOutputMessage } from "./definitions/IWsEndUserSetEnqueueServerCreationExOutputMessage";
import { SetEnqueueServerUpdate } from "./definitions/SetEnqueueServerUpdate";
import { SetEnqueueServerUpdateResponse } from "./definitions/SetEnqueueServerUpdateResponse";
import { SetEnqueueServerStart } from "./definitions/SetEnqueueServerStart";
import { SetEnqueueServerStartResponse } from "./definitions/SetEnqueueServerStartResponse";
import { SetEnqueueServerStop } from "./definitions/SetEnqueueServerStop";
import { SetEnqueueServerStopResponse } from "./definitions/SetEnqueueServerStopResponse";
import { SetEnqueueServerDeletion } from "./definitions/SetEnqueueServerDeletion";
import { SetEnqueueServerDeletionResponse } from "./definitions/SetEnqueueServerDeletionResponse";
import { SetEnqueueServerReset } from "./definitions/SetEnqueueServerReset";
import { SetEnqueueServerResetResponse } from "./definitions/SetEnqueueServerResetResponse";
import { SetEnqueueServerRestart } from "./definitions/SetEnqueueServerRestart";
import { SetEnqueueServerRestartResponse } from "./definitions/SetEnqueueServerRestartResponse";
import { SetEnqueueServerPowerOff } from "./definitions/SetEnqueueServerPowerOff";
import { SetEnqueueServerPowerOffResponse } from "./definitions/SetEnqueueServerPowerOffResponse";
import { SetEnqueueServerArchiviation } from "./definitions/SetEnqueueServerArchiviation";
import { SetEnqueueServerArchiviationResponse } from "./definitions/SetEnqueueServerArchiviationResponse";
import { SetEnqueueServerRestore } from "./definitions/SetEnqueueServerRestore";
import { SetEnqueueServerRestoreResponse } from "./definitions/SetEnqueueServerRestoreResponse";
import { SetRenameServer } from "./definitions/SetRenameServer";
import { SetRenameServerResponse } from "./definitions/SetRenameServerResponse";
import { SetEnqueueMountDvdIso } from "./definitions/SetEnqueueMountDvdIso";
import { SetEnqueueMountDvdIsoResponse } from "./definitions/SetEnqueueMountDvdIsoResponse";
import { SetEnqueueUnmountDvdIso } from "./definitions/SetEnqueueUnmountDvdIso";
import { SetEnqueueUnmountDvdIsoResponse } from "./definitions/SetEnqueueUnmountDvdIsoResponse";
import { SetEnqueueVirtualDiskExport } from "./definitions/SetEnqueueVirtualDiskExport";
import { SetEnqueueVirtualDiskExportResponse } from "./definitions/SetEnqueueVirtualDiskExportResponse";
import { SetEnqueueVirtualDiskManage } from "./definitions/SetEnqueueVirtualDiskManage";
import { SetEnqueueVirtualDiskManageResponse } from "./definitions/SetEnqueueVirtualDiskManageResponse";
import { SetEnqueueServerSnapshot } from "./definitions/SetEnqueueServerSnapshot";
import { SetEnqueueServerSnapshotResponse } from "./definitions/SetEnqueueServerSnapshotResponse";
import { SetEnqueuePersonalTemplateCreation } from "./definitions/SetEnqueuePersonalTemplateCreation";
import { SetEnqueuePersonalTemplateCreationResponse } from "./definitions/SetEnqueuePersonalTemplateCreationResponse";
import { SetChangeNoteServer } from "./definitions/SetChangeNoteServer";
import { SetChangeNoteServerResponse } from "./definitions/SetChangeNoteServerResponse";
import { SetPurchaseIpAddress } from "./definitions/SetPurchaseIpAddress";
import { SetPurchaseIpAddressResponse } from "./definitions/SetPurchaseIpAddressResponse";
import { SetRemoveIpAddress } from "./definitions/SetRemoveIpAddress";
import { SetRemoveIpAddressResponse } from "./definitions/SetRemoveIpAddressResponse";
import { SetEnqueueAssociateIpAddress } from "./definitions/SetEnqueueAssociateIpAddress";
import { SetEnqueueAssociateIpAddressResponse } from "./definitions/SetEnqueueAssociateIpAddressResponse";
import { SetEnqueueDeassociateIpAddress } from "./definitions/SetEnqueueDeassociateIpAddress";
import { SetEnqueueDeassociateIpAddressResponse } from "./definitions/SetEnqueueDeassociateIpAddressResponse";
import { SetPurchaseVLan } from "./definitions/SetPurchaseVLan";
import { SetPurchaseVLanResponse } from "./definitions/SetPurchaseVLanResponse";
import { SetRemoveVLan } from "./definitions/SetRemoveVLan";
import { SetRemoveVLanResponse } from "./definitions/SetRemoveVLanResponse";
import { SetRenameVLan } from "./definitions/SetRenameVLan";
import { SetRenameVLanResponse } from "./definitions/SetRenameVLanResponse";
import { SetEnqueueAssociateVLan } from "./definitions/SetEnqueueAssociateVLan";
import { SetEnqueueAssociateVLanResponse } from "./definitions/SetEnqueueAssociateVLanResponse";
import { SetEnqueueDeassociateVLan } from "./definitions/SetEnqueueDeassociateVLan";
import { SetEnqueueDeassociateVLanResponse } from "./definitions/SetEnqueueDeassociateVLanResponse";
import { SetEnqueueCreateFtpAccount } from "./definitions/SetEnqueueCreateFtpAccount";
import { SetEnqueueCreateFtpAccountResponse } from "./definitions/SetEnqueueCreateFtpAccountResponse";
import { SetEnqueueResizeFtpAccount } from "./definitions/SetEnqueueResizeFtpAccount";
import { SetEnqueueResizeFtpAccountResponse } from "./definitions/SetEnqueueResizeFtpAccountResponse";
import { SetReadNews } from "./definitions/SetReadNews";
import { SetReadNewsResponse } from "./definitions/SetReadNewsResponse";
import { SetAddServerScheduledOperation } from "./definitions/SetAddServerScheduledOperation";
import { SetAddServerScheduledOperationResponse } from "./definitions/SetAddServerScheduledOperationResponse";
import { SetUpdateServerScheduledOperation } from "./definitions/SetUpdateServerScheduledOperation";
import { SetUpdateServerScheduledOperationResponse } from "./definitions/SetUpdateServerScheduledOperationResponse";
import { SetRemoveServerScheduledOperation } from "./definitions/SetRemoveServerScheduledOperation";
import { SetRemoveServerScheduledOperationResponse } from "./definitions/SetRemoveServerScheduledOperationResponse";
import { SetEnqueuePurchaseSharedStorage } from "./definitions/SetEnqueuePurchaseSharedStorage";
import { SetEnqueuePurchaseSharedStorageResponse } from "./definitions/SetEnqueuePurchaseSharedStorageResponse";
import { SetEnqueueRemoveSharedStorage } from "./definitions/SetEnqueueRemoveSharedStorage";
import { SetEnqueueRemoveSharedStorageResponse } from "./definitions/SetEnqueueRemoveSharedStorageResponse";
import { SetEnqueueModifySharedStorage } from "./definitions/SetEnqueueModifySharedStorage";
import { SetEnqueueModifySharedStorageResponse } from "./definitions/SetEnqueueModifySharedStorageResponse";
import { SetEnqueueAddIqnSharedStorage } from "./definitions/SetEnqueueAddIqnSharedStorage";
import { SetEnqueueAddIqnSharedStorageResponse } from "./definitions/SetEnqueueAddIqnSharedStorageResponse";
import { SetEnqueueRemoveIqnSharedStorage } from "./definitions/SetEnqueueRemoveIqnSharedStorage";
import { SetEnqueueRemoveIqnSharedStorageResponse } from "./definitions/SetEnqueueRemoveIqnSharedStorageResponse";
import { SetRenameSharedStorage } from "./definitions/SetRenameSharedStorage";
import { SetRenameSharedStorageResponse } from "./definitions/SetRenameSharedStorageResponse";
import { SetUpdatePersonalTemplate } from "./definitions/SetUpdatePersonalTemplate";
import { SetUpdatePersonalTemplateResponse } from "./definitions/SetUpdatePersonalTemplateResponse";
import { SetRemovePersonalTemplate } from "./definitions/SetRemovePersonalTemplate";
import { SetRemovePersonalTemplateResponse } from "./definitions/SetRemovePersonalTemplateResponse";
import { SetPurchasedAdditionalServices } from "./definitions/SetPurchasedAdditionalServices";
import { SetPurchasedAdditionalServicesResponse } from "./definitions/SetPurchasedAdditionalServicesResponse";
import { SetControlToolActive } from "./definitions/SetControlToolActive";
import { SetControlToolActiveResponse } from "./definitions/SetControlToolActiveResponse";
import { SetControlToolDisable } from "./definitions/SetControlToolDisable";
import { SetControlToolDisableResponse } from "./definitions/SetControlToolDisableResponse";
import { GetControlToolCheck } from "./definitions/GetControlToolCheck";
import { GetControlToolCheckResponse } from "./definitions/GetControlToolCheckResponse";
import { GetControlToolActivationRequests } from "./definitions/GetControlToolActivationRequests";
import { GetControlToolActivationRequestsResponse } from "./definitions/GetControlToolActivationRequestsResponse";
import { SetControlToolActivationRequest } from "./definitions/SetControlToolActivationRequest";
import { SetControlToolActivationRequestResponse } from "./definitions/SetControlToolActivationRequestResponse";
import { GetNetworkAdapterConfiguration } from "./definitions/GetNetworkAdapterConfiguration";
import { GetNetworkAdapterConfigurationResponse } from "./definitions/GetNetworkAdapterConfigurationResponse";
import { GetControlToolCommandResult } from "./definitions/GetControlToolCommandResult";
import { GetControlToolCommandResultResponse } from "./definitions/GetControlToolCommandResultResponse";
import { SetEnqueueUpdateControlTool } from "./definitions/SetEnqueueUpdateControlTool";
import { SetEnqueueUpdateControlToolResponse } from "./definitions/SetEnqueueUpdateControlToolResponse";
import { GetScheduleOccurrences } from "./definitions/GetScheduleOccurrences";
import { GetScheduleOccurrencesResponse } from "./definitions/GetScheduleOccurrencesResponse";
import { GetVdcGraph } from "./definitions/GetVdcGraph";
import { GetVdcGraphResponse } from "./definitions/GetVdcGraphResponse";
import { SetAddVdcGraph } from "./definitions/SetAddVdcGraph";
import { SetAddVdcGraphResponse } from "./definitions/SetAddVdcGraphResponse";
import { SetUpdateVdcGraph } from "./definitions/SetUpdateVdcGraph";
import { SetUpdateVdcGraphResponse } from "./definitions/SetUpdateVdcGraphResponse";
import { GetAssistanceLanguages } from "./definitions/GetAssistanceLanguages";
import { GetAssistanceLanguagesResponse } from "./definitions/GetAssistanceLanguagesResponse";
import { GetAssistanceLanguagesList } from "./definitions/GetAssistanceLanguagesList";
import { GetAssistanceLanguagesListResponse } from "./definitions/GetAssistanceLanguagesListResponse";
import { SetUpdateAssistanceRequest } from "./definitions/SetUpdateAssistanceRequest";
import { SetUpdateAssistanceRequestResponse } from "./definitions/SetUpdateAssistanceRequestResponse";
import { GetAssistanceRequestDetails } from "./definitions/GetAssistanceRequestDetails";
import { GetAssistanceRequestDetailsResponse } from "./definitions/GetAssistanceRequestDetailsResponse";
import { SetAssistanceQuotationAcceptance } from "./definitions/SetAssistanceQuotationAcceptance";
import { SetAssistanceQuotationAcceptanceResponse } from "./definitions/SetAssistanceQuotationAcceptanceResponse";
import { SetSendAssistanceRequest } from "./definitions/SetSendAssistanceRequest";
import { SetSendAssistanceRequestResponse } from "./definitions/SetSendAssistanceRequestResponse";
import { SetInsertAssistanceRequest } from "./definitions/SetInsertAssistanceRequest";
import { SetInsertAssistanceRequestResponse } from "./definitions/SetInsertAssistanceRequestResponse";
import { GetUserAssistanceRequests } from "./definitions/GetUserAssistanceRequests";
import { GetUserAssistanceRequestsResponse } from "./definitions/GetUserAssistanceRequestsResponse";
import { IWsEndUserSetEnqueuePurchasePrivateCloudOutputMessage } from "./definitions/IWsEndUserSetEnqueuePurchasePrivateCloudOutputMessage";
import { IWsEndUserGetPrivateCloudResourcesTypesOutputMessage } from "./definitions/IWsEndUserGetPrivateCloudResourcesTypesOutputMessage";
import { IWsEndUserGetPrivateCloudResourcesTypes2OutputMessage } from "./definitions/IWsEndUserGetPrivateCloudResourcesTypes2OutputMessage";
import { IWsEndUserGetPurchasedPrivateCloudsOutputMessage } from "./definitions/IWsEndUserGetPurchasedPrivateCloudsOutputMessage";
import { IWsEndUserGetPurchasedPrivateCloudDetailsOutputMessage } from "./definitions/IWsEndUserGetPurchasedPrivateCloudDetailsOutputMessage";
import { IWsEndUserGetPurchasedPrivateCloudDetails2OutputMessage } from "./definitions/IWsEndUserGetPurchasedPrivateCloudDetails2OutputMessage";
import { IWsEndUserSetEnqueueModifyPrivateCloudResourcesOutputMessage } from "./definitions/IWsEndUserSetEnqueueModifyPrivateCloudResourcesOutputMessage";
import { IWsEndUserSetEnqueuePrivateCloudDeletionOutputMessage } from "./definitions/IWsEndUserSetEnqueuePrivateCloudDeletionOutputMessage";
import { IWsEndUserCancelDeletePrivateCloudInstanceOutputMessage } from "./definitions/IWsEndUserCancelDeletePrivateCloudInstanceOutputMessage";
import { IWsEndUserSetEnqueuePrivateCloudActivationOutputMessage } from "./definitions/IWsEndUserSetEnqueuePrivateCloudActivationOutputMessage";
import { IWsEndUserGetPrivateCloudOrganizationsOutputMessage } from "./definitions/IWsEndUserGetPrivateCloudOrganizationsOutputMessage";
import { IWsEndUserGetPrivateCloudOrganizationDetailsOutputMessage } from "./definitions/IWsEndUserGetPrivateCloudOrganizationDetailsOutputMessage";
import { IWsEndUserGetHybridLinksbyOrgOutputMessage } from "./definitions/IWsEndUserGetHybridLinksbyOrgOutputMessage";
import { IWsEndUserGetActivatedPrivateCloudFeaturesOutputMessage } from "./definitions/IWsEndUserGetActivatedPrivateCloudFeaturesOutputMessage";
import { IWsEndUserSetEnqueueModifyPrivateCloudOrganizationOutputMessage } from "./definitions/IWsEndUserSetEnqueueModifyPrivateCloudOrganizationOutputMessage";
import { SetEnqueueLoadBalancerCreation } from "./definitions/SetEnqueueLoadBalancerCreation";
import { SetEnqueueLoadBalancerCreationResponse } from "./definitions/SetEnqueueLoadBalancerCreationResponse";
import { SetEnqueueLoadBalancerDeletion } from "./definitions/SetEnqueueLoadBalancerDeletion";
import { SetEnqueueLoadBalancerDeletionResponse } from "./definitions/SetEnqueueLoadBalancerDeletionResponse";
import { GetLoadBalancers } from "./definitions/GetLoadBalancers";
import { GetLoadBalancersResponse } from "./definitions/GetLoadBalancersResponse";
import { IWsEndUserSetEnqueueReinitializeLoadBalancerOutputMessage1 } from "./definitions/IWsEndUserSetEnqueueReinitializeLoadBalancerOutputMessage1";
import { IWsEndUserGetAdditionalIpServicesOutputMessage1 } from "./definitions/IWsEndUserGetAdditionalIpServicesOutputMessage1";
import { IWsEndUserIsLuckySmartAvailableOutputMessage1 } from "./definitions/IWsEndUserIsLuckySmartAvailableOutputMessage1";
import { IWsEndUserGetLastSoldOutSettingItemListOutputMessage1 } from "./definitions/IWsEndUserGetLastSoldOutSettingItemListOutputMessage1";
import { IWsEndUserGetHybridLinksOutputMessage1 } from "./definitions/IWsEndUserGetHybridLinksOutputMessage1";
import { IWsEndUserGetHybridLinksPricingTypesOutputMessage1 } from "./definitions/IWsEndUserGetHybridLinksPricingTypesOutputMessage1";
import { IWsEndUserSetEnqueueCreateHybridLinkOutputMessage1 } from "./definitions/IWsEndUserSetEnqueueCreateHybridLinkOutputMessage1";
import { IWsEndUserSetEnqueueDeleteHybridLinkOutputMessage1 } from "./definitions/IWsEndUserSetEnqueueDeleteHybridLinkOutputMessage1";
import { IWsEndUserGetPurchasedPrivateCloudsBaseOutputMessage1 } from "./definitions/IWsEndUserGetPurchasedPrivateCloudsBaseOutputMessage1";
import { IWsEndUserGetCountriesOutputMessage1 } from "./definitions/IWsEndUserGetCountriesOutputMessage1";
import { IWsEndUserGetSharedStoragePricingTypesOutputMessage1 } from "./definitions/IWsEndUserGetSharedStoragePricingTypesOutputMessage1";
import { IWsEndUserGetSharedStorageDetailsOutputMessage1 } from "./definitions/IWsEndUserGetSharedStorageDetailsOutputMessage1";
import { IWsEndUserRenameHybridLinkOutputMessage1 } from "./definitions/IWsEndUserRenameHybridLinkOutputMessage1";
import { IWsEndUserPlannedChangePrivateCloudWindowsLicenseDeletionOutputMessage1 } from "./definitions/IWsEndUserPlannedChangePrivateCloudWindowsLicenseDeletionOutputMessage1";
import { IWsEndUserPlannedChangePrivateCloudLicenseDeletionOutputMessage1 } from "./definitions/IWsEndUserPlannedChangePrivateCloudLicenseDeletionOutputMessage1";
import { IWsEndUserChangePrivateCloudPasswordOutputMessage1 } from "./definitions/IWsEndUserChangePrivateCloudPasswordOutputMessage1";
import { IWsEndUserChangeZertoPasswordOutputMessage1 } from "./definitions/IWsEndUserChangeZertoPasswordOutputMessage1";
import { IWsEndUserGetVirtualMachinePricingTypesOutputMessage1 } from "./definitions/IWsEndUserGetVirtualMachinePricingTypesOutputMessage1";
import { IWsEndUserSetEnqueueModifyVirtualMachinePackageOutputMessage1 } from "./definitions/IWsEndUserSetEnqueueModifyVirtualMachinePackageOutputMessage1";
import { IWsEndUserServerPlannedChangeDeletionOutputMessage1 } from "./definitions/IWsEndUserServerPlannedChangeDeletionOutputMessage1";
import { IWsEndUserGetHypervisorTemplatesPriorityOutputMessage1 } from "./definitions/IWsEndUserGetHypervisorTemplatesPriorityOutputMessage1";
import { IWsEndUserGetHypervisorTemplatesOutputMessage1 } from "./definitions/IWsEndUserGetHypervisorTemplatesOutputMessage1";
import { IWsEndUserGetHypervisorTemplateDetailsOutputMessage1 } from "./definitions/IWsEndUserGetHypervisorTemplateDetailsOutputMessage1";
import { IWsEndUserGetPrivateCloudPricingTypesOutputMessage1 } from "./definitions/IWsEndUserGetPrivateCloudPricingTypesOutputMessage1";
import { IWsEndUserGetPrivateCloudResourcesOutputMessage1 } from "./definitions/IWsEndUserGetPrivateCloudResourcesOutputMessage1";
import { IWsEndUserGetPrivateCloudCustomProductsOutputMessage1 } from "./definitions/IWsEndUserGetPrivateCloudCustomProductsOutputMessage1";
import { IWsEndUserGetPublicVLanForUserOutputMessage1 } from "./definitions/IWsEndUserGetPublicVLanForUserOutputMessage1";
import { IWsEndUserManageIpOutputMessage1 } from "./definitions/IWsEndUserManageIpOutputMessage1";
import { IWsEndUserGetPrivateCloudNamingBlacklistsOutputMessage1 } from "./definitions/IWsEndUserGetPrivateCloudNamingBlacklistsOutputMessage1";
import { IWsEndUserCancelDeleteVirtualMachineOutputMessage1 } from "./definitions/IWsEndUserCancelDeleteVirtualMachineOutputMessage1";
import { IWsEndUserCreateVpcUserOutputMessage1 } from "./definitions/IWsEndUserCreateVpcUserOutputMessage1";
import { IWsEndUserGetVpcUsersOutputMessage1 } from "./definitions/IWsEndUserGetVpcUsersOutputMessage1";
import { IWsEndUserRequestVpcUserOtpTokenOutputMessage1 } from "./definitions/IWsEndUserRequestVpcUserOtpTokenOutputMessage1";
import { IWsEndUserSetVpcOtpStatusOutputMessage1 } from "./definitions/IWsEndUserSetVpcOtpStatusOutputMessage1";
import { IWsEndUserResetVpcUserPasswordOutputMessage1 } from "./definitions/IWsEndUserResetVpcUserPasswordOutputMessage1";
import { IWsEndUserDeleteVpcUserOutputMessage1 } from "./definitions/IWsEndUserDeleteVpcUserOutputMessage1";
import { IWsEndUserVerifyVpcUserOtpOutputMessage1 } from "./definitions/IWsEndUserVerifyVpcUserOtpOutputMessage1";
import { IWsEndUserGetVpcRolesOutputMessage1 } from "./definitions/IWsEndUserGetVpcRolesOutputMessage1";
import { IWsEndUserUpdateVpcUserOutputMessage1 } from "./definitions/IWsEndUserUpdateVpcUserOutputMessage1";
import { IWsEndUserSyncVpcUserOtpTokenOutputMessage1 } from "./definitions/IWsEndUserSyncVpcUserOtpTokenOutputMessage1";
import { IWsEndUserRemoveOldIpFromVpsOutputMessage1 } from "./definitions/IWsEndUserRemoveOldIpFromVpsOutputMessage1";
import { IWsEndUserGetApplianceTypesOutputMessage1 } from "./definitions/IWsEndUserGetApplianceTypesOutputMessage1";
import { IWsEndUserGetAllTagsOutputMessage1 } from "./definitions/IWsEndUserGetAllTagsOutputMessage1";
import { IWsEndUserGetServersListOutputMessage1 } from "./definitions/IWsEndUserGetServersListOutputMessage1";
import { IWsEndUserGetPagedServersListOutputMessage1 } from "./definitions/IWsEndUserGetPagedServersListOutputMessage1";
import { IWsEndUserGetOpenStackFlavorsOutputMessage1 } from "./definitions/IWsEndUserGetOpenStackFlavorsOutputMessage1";
import { IWsEndUserGetOperationsLogOutputMessage1 } from "./definitions/IWsEndUserGetOperationsLogOutputMessage1";
import { GetPurchasedFtp1 } from "./definitions/GetPurchasedFtp1";
import { GetPurchasedFtpResponse1 } from "./definitions/GetPurchasedFtpResponse1";
import { IWsEndUserGetTemplateLicensesOutputMessage1 } from "./definitions/IWsEndUserGetTemplateLicensesOutputMessage1";
import { IWsEndUserGetRemoteAccessUrlExOutputMessage1 } from "./definitions/IWsEndUserGetRemoteAccessUrlExOutputMessage1";
import { IWsEndUserGetRemoteAccessUrlAsyncResponseOutputMessage1 } from "./definitions/IWsEndUserGetRemoteAccessUrlAsyncResponseOutputMessage1";
import { IWsEndUserGetVmPerformanceOutputMessage1 } from "./definitions/IWsEndUserGetVmPerformanceOutputMessage1";
import { IWsEndUserGetVmPerformancesOutputMessage1 } from "./definitions/IWsEndUserGetVmPerformancesOutputMessage1";
import { IWsEndUserGetVmMetricsOutputMessage1 } from "./definitions/IWsEndUserGetVmMetricsOutputMessage1";
import { IWsEndUserGetVirtualMachineCostOutputMessage1 } from "./definitions/IWsEndUserGetVirtualMachineCostOutputMessage1";
import { IWsEndUserGetVirtualMachineResourcesProductsOutputMessage1 } from "./definitions/IWsEndUserGetVirtualMachineResourcesProductsOutputMessage1";
import { IWsEndUserSetEnqueueServerCreationExOutputMessage1 } from "./definitions/IWsEndUserSetEnqueueServerCreationExOutputMessage1";
import { SetEnqueueCreateFtpAccount1 } from "./definitions/SetEnqueueCreateFtpAccount1";
import { SetEnqueueCreateFtpAccountResponse1 } from "./definitions/SetEnqueueCreateFtpAccountResponse1";
import { SetEnqueueResizeFtpAccount1 } from "./definitions/SetEnqueueResizeFtpAccount1";
import { SetEnqueueResizeFtpAccountResponse1 } from "./definitions/SetEnqueueResizeFtpAccountResponse1";
import { SetEnqueueAddIqnSharedStorage1 } from "./definitions/SetEnqueueAddIqnSharedStorage1";
import { SetEnqueueAddIqnSharedStorageResponse1 } from "./definitions/SetEnqueueAddIqnSharedStorageResponse1";
import { SetEnqueueRemoveIqnSharedStorage1 } from "./definitions/SetEnqueueRemoveIqnSharedStorage1";
import { SetEnqueueRemoveIqnSharedStorageResponse1 } from "./definitions/SetEnqueueRemoveIqnSharedStorageResponse1";
import { GetVdcGraph1 } from "./definitions/GetVdcGraph1";
import { GetVdcGraphResponse1 } from "./definitions/GetVdcGraphResponse1";
import { SetAddVdcGraph1 } from "./definitions/SetAddVdcGraph1";
import { SetAddVdcGraphResponse1 } from "./definitions/SetAddVdcGraphResponse1";
import { SetUpdateVdcGraph1 } from "./definitions/SetUpdateVdcGraph1";
import { SetUpdateVdcGraphResponse1 } from "./definitions/SetUpdateVdcGraphResponse1";
import { IWsEndUserSetEnqueuePurchasePrivateCloudOutputMessage1 } from "./definitions/IWsEndUserSetEnqueuePurchasePrivateCloudOutputMessage1";
import { IWsEndUserGetPrivateCloudResourcesTypesOutputMessage1 } from "./definitions/IWsEndUserGetPrivateCloudResourcesTypesOutputMessage1";
import { IWsEndUserGetPrivateCloudResourcesTypes2OutputMessage1 } from "./definitions/IWsEndUserGetPrivateCloudResourcesTypes2OutputMessage1";
import { IWsEndUserGetPurchasedPrivateCloudsOutputMessage1 } from "./definitions/IWsEndUserGetPurchasedPrivateCloudsOutputMessage1";
import { IWsEndUserGetPurchasedPrivateCloudDetailsOutputMessage1 } from "./definitions/IWsEndUserGetPurchasedPrivateCloudDetailsOutputMessage1";
import { IWsEndUserGetPurchasedPrivateCloudDetails2OutputMessage1 } from "./definitions/IWsEndUserGetPurchasedPrivateCloudDetails2OutputMessage1";
import { IWsEndUserSetEnqueueModifyPrivateCloudResourcesOutputMessage1 } from "./definitions/IWsEndUserSetEnqueueModifyPrivateCloudResourcesOutputMessage1";
import { IWsEndUserSetEnqueuePrivateCloudDeletionOutputMessage1 } from "./definitions/IWsEndUserSetEnqueuePrivateCloudDeletionOutputMessage1";
import { IWsEndUserCancelDeletePrivateCloudInstanceOutputMessage1 } from "./definitions/IWsEndUserCancelDeletePrivateCloudInstanceOutputMessage1";
import { IWsEndUserSetEnqueuePrivateCloudActivationOutputMessage1 } from "./definitions/IWsEndUserSetEnqueuePrivateCloudActivationOutputMessage1";
import { IWsEndUserGetPrivateCloudOrganizationsOutputMessage1 } from "./definitions/IWsEndUserGetPrivateCloudOrganizationsOutputMessage1";
import { IWsEndUserGetPrivateCloudOrganizationDetailsOutputMessage1 } from "./definitions/IWsEndUserGetPrivateCloudOrganizationDetailsOutputMessage1";
import { IWsEndUserGetHybridLinksbyOrgOutputMessage1 } from "./definitions/IWsEndUserGetHybridLinksbyOrgOutputMessage1";
import { IWsEndUserGetActivatedPrivateCloudFeaturesOutputMessage1 } from "./definitions/IWsEndUserGetActivatedPrivateCloudFeaturesOutputMessage1";
import { IWsEndUserSetEnqueueModifyPrivateCloudOrganizationOutputMessage1 } from "./definitions/IWsEndUserSetEnqueueModifyPrivateCloudOrganizationOutputMessage1";
import { WsEndUser } from "./services/WsEndUser";

export interface ArubacloudSvcClient extends SoapClient {
    WsEndUser: WsEndUser;
    GetLoadBalancerLoadsAsync(getLoadBalancerLoads: GetLoadBalancerLoads, options?: ISoapExOptions): Promise<[result: GetLoadBalancerLoadsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancerRuleStatisticsAsync(getLoadBalancerRuleStatistics: GetLoadBalancerRuleStatistics, options?: ISoapExOptions): Promise<[result: GetLoadBalancerRuleStatisticsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerPowerOffAsync(setEnqueueLoadBalancerPowerOff: SetEnqueueLoadBalancerPowerOff, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerPowerOffResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancerNotificationsAsync(getLoadBalancerNotifications: GetLoadBalancerNotifications, options?: ISoapExOptions): Promise<[result: GetLoadBalancerNotificationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerStartAsync(setEnqueueLoadBalancerStart: SetEnqueueLoadBalancerStart, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerStartResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddLoadBalancerContactsAsync(setAddLoadBalancerContacts: SetAddLoadBalancerContacts, options?: ISoapExOptions): Promise<[result: SetAddLoadBalancerContactsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveLoadBalancerContactsAsync(setRemoveLoadBalancerContacts: SetRemoveLoadBalancerContacts, options?: ISoapExOptions): Promise<[result: SetRemoveLoadBalancerContactsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerAddInstancesAsync(setEnqueueLoadBalancerAddInstances: SetEnqueueLoadBalancerAddInstances, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerAddInstancesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerRemoveInstancesAsync(setEnqueueLoadBalancerRemoveInstances: SetEnqueueLoadBalancerRemoveInstances, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerRemoveInstancesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetModifyLoadBalancerAsync(setModifyLoadBalancer: SetModifyLoadBalancer, options?: ISoapExOptions): Promise<[result: SetModifyLoadBalancerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddLoadBalancerRuleAsync(setAddLoadBalancerRule: SetAddLoadBalancerRule, options?: ISoapExOptions): Promise<[result: SetAddLoadBalancerRuleResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveLoadBalancerRuleAsync(setRemoveLoadBalancerRule: SetRemoveLoadBalancerRule, options?: ISoapExOptions): Promise<[result: SetRemoveLoadBalancerRuleResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueReinitializeLoadBalancerAsync(iWsEndUserSetEnqueueReinitializeLoadBalancerInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueReinitializeLoadBalancerOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPreConfiguredPackagesAsync(getPreConfiguredPackages: GetPreConfiguredPackages, options?: ISoapExOptions): Promise<[result: GetPreConfiguredPackagesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAdditionalIPServicesAsync(iWsEndUserGetAdditionalIpServicesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetAdditionalIpServicesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueReinitializeServerAsync(setEnqueueReinitializeServer: SetEnqueueReinitializeServer, options?: ISoapExOptions): Promise<[result: SetEnqueueReinitializeServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAllCloudIpAddressesAsync(getAllCloudIpAddresses: GetAllCloudIpAddresses, options?: ISoapExOptions): Promise<[result: GetAllCloudIpAddressesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueSetReverseDnsAsync(setEnqueueSetReverseDns: SetEnqueueSetReverseDns, options?: ISoapExOptions): Promise<[result: SetEnqueueSetReverseDnsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueResetReverseDnsAsync(setEnqueueResetReverseDns: SetEnqueueResetReverseDns, options?: ISoapExOptions): Promise<[result: SetEnqueueResetReverseDnsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetReverseDnsAsync(getReverseDns: GetReverseDns, options?: ISoapExOptions): Promise<[result: GetReverseDnsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    IsLuckySmartAvailableAsync(iWsEndUserIsLuckySmartAvailableInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserIsLuckySmartAvailableOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLastSoldOutSettingItemListAsync(iWsEndUserGetLastSoldOutSettingItemListInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetLastSoldOutSettingItemListOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHybridLinksAsync(iWsEndUserGetHybridLinksInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetHybridLinksOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHybridLinksPricingTypesAsync(iWsEndUserGetHybridLinksPricingTypesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetHybridLinksPricingTypesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueCreateHybridLinkAsync(iWsEndUserSetEnqueueCreateHybridLinkInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueCreateHybridLinkOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueDeleteHybridLinkAsync(iWsEndUserSetEnqueueDeleteHybridLinkInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueDeleteHybridLinkOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudsBaseAsync(iWsEndUserGetPurchasedPrivateCloudsBaseInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPurchasedPrivateCloudsBaseOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCountriesAsync(iWsEndUserGetCountriesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetCountriesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSharedStoragePricingTypesAsync(iWsEndUserGetSharedStoragePricingTypesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetSharedStoragePricingTypesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSharedStorageDetailsAsync(iWsEndUserGetSharedStorageDetailsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetSharedStorageDetailsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    RenameHybridLinkAsync(iWsEndUserRenameHybridLinkInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserRenameHybridLinkOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    PlannedChangePrivateCloudWindowsLicenseDeletionAsync(iWsEndUserPlannedChangePrivateCloudWindowsLicenseDeletionInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserPlannedChangePrivateCloudWindowsLicenseDeletionOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    PlannedChangePrivateCloudLicenseDeletionAsync(iWsEndUserPlannedChangePrivateCloudLicenseDeletionInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserPlannedChangePrivateCloudLicenseDeletionOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ChangePrivateCloudPasswordAsync(iWsEndUserChangePrivateCloudPasswordInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserChangePrivateCloudPasswordOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ChangeZertoPasswordAsync(iWsEndUserChangeZertoPasswordInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserChangeZertoPasswordOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualMachinePricingTypesAsync(iWsEndUserGetVirtualMachinePricingTypesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVirtualMachinePricingTypesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifyVirtualMachinePackageAsync(iWsEndUserSetEnqueueModifyVirtualMachinePackageInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueModifyVirtualMachinePackageOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ServerPlannedChangeDeletionAsync(iWsEndUserServerPlannedChangeDeletionInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserServerPlannedChangeDeletionOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTemplatesPriorityAsync(iWsEndUserGetHypervisorTemplatesPriorityInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetHypervisorTemplatesPriorityOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTemplatesAsync(iWsEndUserGetHypervisorTemplatesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetHypervisorTemplatesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTemplateDetailsAsync(iWsEndUserGetHypervisorTemplateDetailsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetHypervisorTemplateDetailsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudPricingTypesAsync(iWsEndUserGetPrivateCloudPricingTypesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudPricingTypesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudResourcesAsync(iWsEndUserGetPrivateCloudResourcesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudResourcesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudCustomProductsAsync(iWsEndUserGetPrivateCloudCustomProductsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudCustomProductsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPublicVLanForUserAsync(iWsEndUserGetPublicVLanForUserInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPublicVLanForUserOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ManageIPAsync(iWsEndUserManageIpInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserManageIpOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudNamingBlacklistsAsync(iWsEndUserGetPrivateCloudNamingBlacklistsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudNamingBlacklistsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CancelDeleteVirtualMachineAsync(iWsEndUserCancelDeleteVirtualMachineInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserCancelDeleteVirtualMachineOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CreateVPCUserAsync(iWsEndUserCreateVpcUserInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserCreateVpcUserOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVPCUsersAsync(iWsEndUserGetVpcUsersInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVpcUsersOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    RequestVPCUserOtpTokenAsync(iWsEndUserRequestVpcUserOtpTokenInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserRequestVpcUserOtpTokenOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetVPCOtpStatusAsync(iWsEndUserSetVpcOtpStatusInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetVpcOtpStatusOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ResetVPCUserPasswordAsync(iWsEndUserResetVpcUserPasswordInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserResetVpcUserPasswordOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    DeleteVPCUserAsync(iWsEndUserDeleteVpcUserInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserDeleteVpcUserOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    VerifyVPCUserOtpAsync(iWsEndUserVerifyVpcUserOtpInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserVerifyVpcUserOtpOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVPCRolesAsync(iWsEndUserGetVpcRolesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVpcRolesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    UpdateVPCUserAsync(iWsEndUserUpdateVpcUserInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserUpdateVpcUserOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SyncVPCUserOtpTokenAsync(iWsEndUserSyncVpcUserOtpTokenInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSyncVpcUserOtpTokenOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    RemoveOldIpFromVPSAsync(iWsEndUserRemoveOldIpFromVpsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserRemoveOldIpFromVpsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetUserAuthenticationTokenAsync(getUserAuthenticationToken: GetUserAuthenticationToken, options?: ISoapExOptions): Promise<[result: GetUserAuthenticationTokenResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCompanyByUrlAsync(getCompanyByUrl: GetCompanyByUrl, options?: ISoapExOptions): Promise<[result: GetCompanyByUrlResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTypesAsync(getHypervisorTypes: GetHypervisorTypes, options?: ISoapExOptions): Promise<[result: GetHypervisorTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorsAsync(getHypervisors: GetHypervisors, options?: ISoapExOptions): Promise<[result: GetHypervisorsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetApplianceTypesAsync(iWsEndUserGetApplianceTypesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetApplianceTypesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAllTagsAsync(iWsEndUserGetAllTagsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetAllTagsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorDetailsAsync(getHypervisorDetails: GetHypervisorDetails, options?: ISoapExOptions): Promise<[result: GetHypervisorDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualDatacenterAsync(getVirtualDatacenter: GetVirtualDatacenter, options?: ISoapExOptions): Promise<[result: GetVirtualDatacenterResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualDatacenterCostAsync(getVirtualDatacenterCost: GetVirtualDatacenterCost, options?: ISoapExOptions): Promise<[result: GetVirtualDatacenterCostResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServersAsync(getServers: GetServers, options?: ISoapExOptions): Promise<[result: GetServersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServersListAsync(iWsEndUserGetServersListInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetServersListOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPagedServersListAsync(iWsEndUserGetPagedServersListInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPagedServersListOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServerDetailsAsync(getServerDetails: GetServerDetails, options?: ISoapExOptions): Promise<[result: GetServerDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCreditAsync(getCredit: GetCredit, options?: ISoapExOptions): Promise<[result: GetCreditResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPriceListAsync(getPriceList: GetPriceList, options?: ISoapExOptions): Promise<[result: GetPriceListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedVLansAsync(getPurchasedVLans: GetPurchasedVLans, options?: ISoapExOptions): Promise<[result: GetPurchasedVLansResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedIpAddressesAsync(getPurchasedIpAddresses: GetPurchasedIpAddresses, options?: ISoapExOptions): Promise<[result: GetPurchasedIpAddressesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetOpenStackFlavorsAsync(iWsEndUserGetOpenStackFlavorsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetOpenStackFlavorsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetJobsAsync(getJobs: GetJobs, options?: ISoapExOptions): Promise<[result: GetJobsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLogsAsync(getLogs: GetLogs, options?: ISoapExOptions): Promise<[result: GetLogsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetOperationsLogAsync(iWsEndUserGetOperationsLogInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetOperationsLogOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetDatacenterConfigurationsAsync(getDatacenterConfigurations: GetDatacenterConfigurations, options?: ISoapExOptions): Promise<[result: GetDatacenterConfigurationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCustomVirtualDisksAsync(getCustomVirtualDisks: GetCustomVirtualDisks, options?: ISoapExOptions): Promise<[result: GetCustomVirtualDisksResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetIsosAsync(getIsos: GetIsos, options?: ISoapExOptions): Promise<[result: GetIsosResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetUserInfoAsync(getUserInfo: GetUserInfo, options?: ISoapExOptions): Promise<[result: GetUserInfoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedFTPAsync(getPurchasedFtp: GetPurchasedFtp, options?: ISoapExOptions): Promise<[result: GetPurchasedFtpResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetNewsAsync(getNews: GetNews, options?: ISoapExOptions): Promise<[result: GetNewsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetScheduledOperationsAsync(getScheduledOperations: GetScheduledOperations, options?: ISoapExOptions): Promise<[result: GetScheduledOperationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServerSchedulesLogsAsync(getServerSchedulesLogs: GetServerSchedulesLogs, options?: ISoapExOptions): Promise<[result: GetServerSchedulesLogsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSchedulerDataTypesAsync(getSchedulerDataTypes: GetSchedulerDataTypes, options?: ISoapExOptions): Promise<[result: GetSchedulerDataTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetTemplateDetailsAsync(getTemplateDetails: GetTemplateDetails, options?: ISoapExOptions): Promise<[result: GetTemplateDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetTemplateCategoriesAsync(getTemplateCategories: GetTemplateCategories, options?: ISoapExOptions): Promise<[result: GetTemplateCategoriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetTemplateLicensesAsync(iWsEndUserGetTemplateLicensesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetTemplateLicensesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAvailablePersonalTemplatesAsync(getAvailablePersonalTemplates: GetAvailablePersonalTemplates, options?: ISoapExOptions): Promise<[result: GetAvailablePersonalTemplatesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSystemStatusHistoryAsync(getSystemStatusHistory: GetSystemStatusHistory, options?: ISoapExOptions): Promise<[result: GetSystemStatusHistoryResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSharedStoragesAsync(getSharedStorages: GetSharedStorages, options?: ISoapExOptions): Promise<[result: GetSharedStoragesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAdditionalServicesAsync(getAdditionalServices: GetAdditionalServices, options?: ISoapExOptions): Promise<[result: GetAdditionalServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedAdditionalServicesAsync(getPurchasedAdditionalServices: GetPurchasedAdditionalServices, options?: ISoapExOptions): Promise<[result: GetPurchasedAdditionalServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetRemoteAccessUrlAsync(getRemoteAccessUrl: GetRemoteAccessUrl, options?: ISoapExOptions): Promise<[result: GetRemoteAccessUrlResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetRemoteAccessUrlExAsync(iWsEndUserGetRemoteAccessUrlExInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetRemoteAccessUrlExOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetRemoteAccessUrlAsyncResponseAsync(iWsEndUserGetRemoteAccessUrlAsyncResponseInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetRemoteAccessUrlAsyncResponseOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVMPerformanceAsync(iWsEndUserGetVmPerformanceInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVmPerformanceOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVMPerformancesAsync(iWsEndUserGetVmPerformancesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVmPerformancesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVMMetricsAsync(iWsEndUserGetVmMetricsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVmMetricsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualMachineCostAsync(iWsEndUserGetVirtualMachineCostInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVirtualMachineCostOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualMachineResourcesProductsAsync(iWsEndUserGetVirtualMachineResourcesProductsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVirtualMachineResourcesProductsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CheckEnqueueServerCreationAsync(checkEnqueueServerCreation: CheckEnqueueServerCreation, options?: ISoapExOptions): Promise<[result: CheckEnqueueServerCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerCreationAsync(setEnqueueServerCreation: SetEnqueueServerCreation, options?: ISoapExOptions): Promise<[result: SetEnqueueServerCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerCreationExAsync(iWsEndUserSetEnqueueServerCreationExInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueServerCreationExOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerUpdateAsync(setEnqueueServerUpdate: SetEnqueueServerUpdate, options?: ISoapExOptions): Promise<[result: SetEnqueueServerUpdateResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerStartAsync(setEnqueueServerStart: SetEnqueueServerStart, options?: ISoapExOptions): Promise<[result: SetEnqueueServerStartResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerStopAsync(setEnqueueServerStop: SetEnqueueServerStop, options?: ISoapExOptions): Promise<[result: SetEnqueueServerStopResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerDeletionAsync(setEnqueueServerDeletion: SetEnqueueServerDeletion, options?: ISoapExOptions): Promise<[result: SetEnqueueServerDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerResetAsync(setEnqueueServerReset: SetEnqueueServerReset, options?: ISoapExOptions): Promise<[result: SetEnqueueServerResetResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerRestartAsync(setEnqueueServerRestart: SetEnqueueServerRestart, options?: ISoapExOptions): Promise<[result: SetEnqueueServerRestartResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerPowerOffAsync(setEnqueueServerPowerOff: SetEnqueueServerPowerOff, options?: ISoapExOptions): Promise<[result: SetEnqueueServerPowerOffResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerArchiviationAsync(setEnqueueServerArchiviation: SetEnqueueServerArchiviation, options?: ISoapExOptions): Promise<[result: SetEnqueueServerArchiviationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerRestoreAsync(setEnqueueServerRestore: SetEnqueueServerRestore, options?: ISoapExOptions): Promise<[result: SetEnqueueServerRestoreResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRenameServerAsync(setRenameServer: SetRenameServer, options?: ISoapExOptions): Promise<[result: SetRenameServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueMountDvdIsoAsync(setEnqueueMountDvdIso: SetEnqueueMountDvdIso, options?: ISoapExOptions): Promise<[result: SetEnqueueMountDvdIsoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueUnmountDvdIsoAsync(setEnqueueUnmountDvdIso: SetEnqueueUnmountDvdIso, options?: ISoapExOptions): Promise<[result: SetEnqueueUnmountDvdIsoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueVirtualDiskExportAsync(setEnqueueVirtualDiskExport: SetEnqueueVirtualDiskExport, options?: ISoapExOptions): Promise<[result: SetEnqueueVirtualDiskExportResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueVirtualDiskManageAsync(setEnqueueVirtualDiskManage: SetEnqueueVirtualDiskManage, options?: ISoapExOptions): Promise<[result: SetEnqueueVirtualDiskManageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerSnapshotAsync(setEnqueueServerSnapshot: SetEnqueueServerSnapshot, options?: ISoapExOptions): Promise<[result: SetEnqueueServerSnapshotResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePersonalTemplateCreationAsync(setEnqueuePersonalTemplateCreation: SetEnqueuePersonalTemplateCreation, options?: ISoapExOptions): Promise<[result: SetEnqueuePersonalTemplateCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetChangeNoteServerAsync(setChangeNoteServer: SetChangeNoteServer, options?: ISoapExOptions): Promise<[result: SetChangeNoteServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetPurchaseIpAddressAsync(setPurchaseIpAddress: SetPurchaseIpAddress, options?: ISoapExOptions): Promise<[result: SetPurchaseIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveIpAddressAsync(setRemoveIpAddress: SetRemoveIpAddress, options?: ISoapExOptions): Promise<[result: SetRemoveIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueAssociateIpAddressAsync(setEnqueueAssociateIpAddress: SetEnqueueAssociateIpAddress, options?: ISoapExOptions): Promise<[result: SetEnqueueAssociateIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueDeassociateIpAddressAsync(setEnqueueDeassociateIpAddress: SetEnqueueDeassociateIpAddress, options?: ISoapExOptions): Promise<[result: SetEnqueueDeassociateIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetPurchaseVLanAsync(setPurchaseVLan: SetPurchaseVLan, options?: ISoapExOptions): Promise<[result: SetPurchaseVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveVLanAsync(setRemoveVLan: SetRemoveVLan, options?: ISoapExOptions): Promise<[result: SetRemoveVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRenameVLanAsync(setRenameVLan: SetRenameVLan, options?: ISoapExOptions): Promise<[result: SetRenameVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueAssociateVLanAsync(setEnqueueAssociateVLan: SetEnqueueAssociateVLan, options?: ISoapExOptions): Promise<[result: SetEnqueueAssociateVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueDeassociateVLanAsync(setEnqueueDeassociateVLan: SetEnqueueDeassociateVLan, options?: ISoapExOptions): Promise<[result: SetEnqueueDeassociateVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueCreateFTPAccountAsync(setEnqueueCreateFtpAccount: SetEnqueueCreateFtpAccount, options?: ISoapExOptions): Promise<[result: SetEnqueueCreateFtpAccountResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueResizeFTPAccountAsync(setEnqueueResizeFtpAccount: SetEnqueueResizeFtpAccount, options?: ISoapExOptions): Promise<[result: SetEnqueueResizeFtpAccountResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetReadNewsAsync(setReadNews: SetReadNews, options?: ISoapExOptions): Promise<[result: SetReadNewsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddServerScheduledOperationAsync(setAddServerScheduledOperation: SetAddServerScheduledOperation, options?: ISoapExOptions): Promise<[result: SetAddServerScheduledOperationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdateServerScheduledOperationAsync(setUpdateServerScheduledOperation: SetUpdateServerScheduledOperation, options?: ISoapExOptions): Promise<[result: SetUpdateServerScheduledOperationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveServerScheduledOperationAsync(setRemoveServerScheduledOperation: SetRemoveServerScheduledOperation, options?: ISoapExOptions): Promise<[result: SetRemoveServerScheduledOperationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePurchaseSharedStorageAsync(setEnqueuePurchaseSharedStorage: SetEnqueuePurchaseSharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueuePurchaseSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueRemoveSharedStorageAsync(setEnqueueRemoveSharedStorage: SetEnqueueRemoveSharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueueRemoveSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifySharedStorageAsync(setEnqueueModifySharedStorage: SetEnqueueModifySharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueueModifySharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueAddIQNSharedStorageAsync(setEnqueueAddIqnSharedStorage: SetEnqueueAddIqnSharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueueAddIqnSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueRemoveIQNSharedStorageAsync(setEnqueueRemoveIqnSharedStorage: SetEnqueueRemoveIqnSharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueueRemoveIqnSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRenameSharedStorageAsync(setRenameSharedStorage: SetRenameSharedStorage, options?: ISoapExOptions): Promise<[result: SetRenameSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdatePersonalTemplateAsync(setUpdatePersonalTemplate: SetUpdatePersonalTemplate, options?: ISoapExOptions): Promise<[result: SetUpdatePersonalTemplateResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemovePersonalTemplateAsync(setRemovePersonalTemplate: SetRemovePersonalTemplate, options?: ISoapExOptions): Promise<[result: SetRemovePersonalTemplateResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetPurchasedAdditionalServicesAsync(setPurchasedAdditionalServices: SetPurchasedAdditionalServices, options?: ISoapExOptions): Promise<[result: SetPurchasedAdditionalServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetControlToolActiveAsync(setControlToolActive: SetControlToolActive, options?: ISoapExOptions): Promise<[result: SetControlToolActiveResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetControlToolDisableAsync(setControlToolDisable: SetControlToolDisable, options?: ISoapExOptions): Promise<[result: SetControlToolDisableResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetControlToolCheckAsync(getControlToolCheck: GetControlToolCheck, options?: ISoapExOptions): Promise<[result: GetControlToolCheckResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetControlToolActivationRequestsAsync(getControlToolActivationRequests: GetControlToolActivationRequests, options?: ISoapExOptions): Promise<[result: GetControlToolActivationRequestsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetControlToolActivationRequestAsync(setControlToolActivationRequest: SetControlToolActivationRequest, options?: ISoapExOptions): Promise<[result: SetControlToolActivationRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetNetworkAdapterConfigurationAsync(getNetworkAdapterConfiguration: GetNetworkAdapterConfiguration, options?: ISoapExOptions): Promise<[result: GetNetworkAdapterConfigurationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetControlToolCommandResultAsync(getControlToolCommandResult: GetControlToolCommandResult, options?: ISoapExOptions): Promise<[result: GetControlToolCommandResultResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueUpdateControlToolAsync(setEnqueueUpdateControlTool: SetEnqueueUpdateControlTool, options?: ISoapExOptions): Promise<[result: SetEnqueueUpdateControlToolResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetScheduleOccurrencesAsync(getScheduleOccurrences: GetScheduleOccurrences, options?: ISoapExOptions): Promise<[result: GetScheduleOccurrencesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVDCGraphAsync(getVdcGraph: GetVdcGraph, options?: ISoapExOptions): Promise<[result: GetVdcGraphResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddVDCGraphAsync(setAddVdcGraph: SetAddVdcGraph, options?: ISoapExOptions): Promise<[result: SetAddVdcGraphResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdateVDCGraphAsync(setUpdateVdcGraph: SetUpdateVdcGraph, options?: ISoapExOptions): Promise<[result: SetUpdateVdcGraphResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAssistanceLanguagesAsync(getAssistanceLanguages: GetAssistanceLanguages, options?: ISoapExOptions): Promise<[result: GetAssistanceLanguagesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAssistanceLanguagesListAsync(getAssistanceLanguagesList: GetAssistanceLanguagesList, options?: ISoapExOptions): Promise<[result: GetAssistanceLanguagesListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdateAssistanceRequestAsync(setUpdateAssistanceRequest: SetUpdateAssistanceRequest, options?: ISoapExOptions): Promise<[result: SetUpdateAssistanceRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAssistanceRequestDetailsAsync(getAssistanceRequestDetails: GetAssistanceRequestDetails, options?: ISoapExOptions): Promise<[result: GetAssistanceRequestDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAssistanceQuotationAcceptanceAsync(setAssistanceQuotationAcceptance: SetAssistanceQuotationAcceptance, options?: ISoapExOptions): Promise<[result: SetAssistanceQuotationAcceptanceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetSendAssistanceRequestAsync(setSendAssistanceRequest: SetSendAssistanceRequest, options?: ISoapExOptions): Promise<[result: SetSendAssistanceRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetInsertAssistanceRequestAsync(setInsertAssistanceRequest: SetInsertAssistanceRequest, options?: ISoapExOptions): Promise<[result: SetInsertAssistanceRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetUserAssistanceRequestsAsync(getUserAssistanceRequests: GetUserAssistanceRequests, options?: ISoapExOptions): Promise<[result: GetUserAssistanceRequestsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePurchasePrivateCloudAsync(iWsEndUserSetEnqueuePurchasePrivateCloudInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueuePurchasePrivateCloudOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudResourcesTypesAsync(iWsEndUserGetPrivateCloudResourcesTypesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudResourcesTypesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudResourcesTypes2Async(iWsEndUserGetPrivateCloudResourcesTypes2InputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudResourcesTypes2OutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudsAsync(iWsEndUserGetPurchasedPrivateCloudsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPurchasedPrivateCloudsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudDetailsAsync(iWsEndUserGetPurchasedPrivateCloudDetailsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPurchasedPrivateCloudDetailsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudDetails2Async(iWsEndUserGetPurchasedPrivateCloudDetails2InputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPurchasedPrivateCloudDetails2OutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifyPrivateCloudResourcesAsync(iWsEndUserSetEnqueueModifyPrivateCloudResourcesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueModifyPrivateCloudResourcesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePrivateCloudDeletionAsync(iWsEndUserSetEnqueuePrivateCloudDeletionInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueuePrivateCloudDeletionOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CancelDeletePrivateCloudInstanceAsync(iWsEndUserCancelDeletePrivateCloudInstanceInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserCancelDeletePrivateCloudInstanceOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePrivateCloudActivationAsync(iWsEndUserSetEnqueuePrivateCloudActivationInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueuePrivateCloudActivationOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudOrganizationsAsync(iWsEndUserGetPrivateCloudOrganizationsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudOrganizationsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudOrganizationDetailsAsync(iWsEndUserGetPrivateCloudOrganizationDetailsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudOrganizationDetailsOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHybridLinksbyOrgAsync(iWsEndUserGetHybridLinksbyOrgInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetHybridLinksbyOrgOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetActivatedPrivateCloudFeaturesAsync(iWsEndUserGetActivatedPrivateCloudFeaturesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetActivatedPrivateCloudFeaturesOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifyPrivateCloudOrganizationAsync(iWsEndUserSetEnqueueModifyPrivateCloudOrganizationInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueModifyPrivateCloudOrganizationOutputMessage, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerCreationAsync(setEnqueueLoadBalancerCreation: SetEnqueueLoadBalancerCreation, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerDeletionAsync(setEnqueueLoadBalancerDeletion: SetEnqueueLoadBalancerDeletion, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancersAsync(getLoadBalancers: GetLoadBalancers, options?: ISoapExOptions): Promise<[result: GetLoadBalancersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancerLoadsAsync(getLoadBalancerLoads: GetLoadBalancerLoads, options?: ISoapExOptions): Promise<[result: GetLoadBalancerLoadsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancerRuleStatisticsAsync(getLoadBalancerRuleStatistics: GetLoadBalancerRuleStatistics, options?: ISoapExOptions): Promise<[result: GetLoadBalancerRuleStatisticsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerPowerOffAsync(setEnqueueLoadBalancerPowerOff: SetEnqueueLoadBalancerPowerOff, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerPowerOffResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancerNotificationsAsync(getLoadBalancerNotifications: GetLoadBalancerNotifications, options?: ISoapExOptions): Promise<[result: GetLoadBalancerNotificationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerStartAsync(setEnqueueLoadBalancerStart: SetEnqueueLoadBalancerStart, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerStartResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddLoadBalancerContactsAsync(setAddLoadBalancerContacts: SetAddLoadBalancerContacts, options?: ISoapExOptions): Promise<[result: SetAddLoadBalancerContactsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveLoadBalancerContactsAsync(setRemoveLoadBalancerContacts: SetRemoveLoadBalancerContacts, options?: ISoapExOptions): Promise<[result: SetRemoveLoadBalancerContactsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerAddInstancesAsync(setEnqueueLoadBalancerAddInstances: SetEnqueueLoadBalancerAddInstances, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerAddInstancesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerRemoveInstancesAsync(setEnqueueLoadBalancerRemoveInstances: SetEnqueueLoadBalancerRemoveInstances, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerRemoveInstancesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetModifyLoadBalancerAsync(setModifyLoadBalancer: SetModifyLoadBalancer, options?: ISoapExOptions): Promise<[result: SetModifyLoadBalancerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddLoadBalancerRuleAsync(setAddLoadBalancerRule: SetAddLoadBalancerRule, options?: ISoapExOptions): Promise<[result: SetAddLoadBalancerRuleResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveLoadBalancerRuleAsync(setRemoveLoadBalancerRule: SetRemoveLoadBalancerRule, options?: ISoapExOptions): Promise<[result: SetRemoveLoadBalancerRuleResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueReinitializeLoadBalancerAsync(iWsEndUserSetEnqueueReinitializeLoadBalancerInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueReinitializeLoadBalancerOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPreConfiguredPackagesAsync(getPreConfiguredPackages: GetPreConfiguredPackages, options?: ISoapExOptions): Promise<[result: GetPreConfiguredPackagesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAdditionalIPServicesAsync(iWsEndUserGetAdditionalIpServicesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetAdditionalIpServicesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueReinitializeServerAsync(setEnqueueReinitializeServer: SetEnqueueReinitializeServer, options?: ISoapExOptions): Promise<[result: SetEnqueueReinitializeServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAllCloudIpAddressesAsync(getAllCloudIpAddresses: GetAllCloudIpAddresses, options?: ISoapExOptions): Promise<[result: GetAllCloudIpAddressesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueSetReverseDnsAsync(setEnqueueSetReverseDns: SetEnqueueSetReverseDns, options?: ISoapExOptions): Promise<[result: SetEnqueueSetReverseDnsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueResetReverseDnsAsync(setEnqueueResetReverseDns: SetEnqueueResetReverseDns, options?: ISoapExOptions): Promise<[result: SetEnqueueResetReverseDnsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetReverseDnsAsync(getReverseDns: GetReverseDns, options?: ISoapExOptions): Promise<[result: GetReverseDnsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    IsLuckySmartAvailableAsync(iWsEndUserIsLuckySmartAvailableInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserIsLuckySmartAvailableOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLastSoldOutSettingItemListAsync(iWsEndUserGetLastSoldOutSettingItemListInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetLastSoldOutSettingItemListOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHybridLinksAsync(iWsEndUserGetHybridLinksInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetHybridLinksOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHybridLinksPricingTypesAsync(iWsEndUserGetHybridLinksPricingTypesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetHybridLinksPricingTypesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueCreateHybridLinkAsync(iWsEndUserSetEnqueueCreateHybridLinkInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueCreateHybridLinkOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueDeleteHybridLinkAsync(iWsEndUserSetEnqueueDeleteHybridLinkInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueDeleteHybridLinkOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudsBaseAsync(iWsEndUserGetPurchasedPrivateCloudsBaseInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPurchasedPrivateCloudsBaseOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCountriesAsync(iWsEndUserGetCountriesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetCountriesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSharedStoragePricingTypesAsync(iWsEndUserGetSharedStoragePricingTypesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetSharedStoragePricingTypesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSharedStorageDetailsAsync(iWsEndUserGetSharedStorageDetailsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetSharedStorageDetailsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    RenameHybridLinkAsync(iWsEndUserRenameHybridLinkInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserRenameHybridLinkOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    PlannedChangePrivateCloudWindowsLicenseDeletionAsync(iWsEndUserPlannedChangePrivateCloudWindowsLicenseDeletionInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserPlannedChangePrivateCloudWindowsLicenseDeletionOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    PlannedChangePrivateCloudLicenseDeletionAsync(iWsEndUserPlannedChangePrivateCloudLicenseDeletionInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserPlannedChangePrivateCloudLicenseDeletionOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ChangePrivateCloudPasswordAsync(iWsEndUserChangePrivateCloudPasswordInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserChangePrivateCloudPasswordOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ChangeZertoPasswordAsync(iWsEndUserChangeZertoPasswordInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserChangeZertoPasswordOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualMachinePricingTypesAsync(iWsEndUserGetVirtualMachinePricingTypesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVirtualMachinePricingTypesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifyVirtualMachinePackageAsync(iWsEndUserSetEnqueueModifyVirtualMachinePackageInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueModifyVirtualMachinePackageOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ServerPlannedChangeDeletionAsync(iWsEndUserServerPlannedChangeDeletionInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserServerPlannedChangeDeletionOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTemplatesPriorityAsync(iWsEndUserGetHypervisorTemplatesPriorityInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetHypervisorTemplatesPriorityOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTemplatesAsync(iWsEndUserGetHypervisorTemplatesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetHypervisorTemplatesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTemplateDetailsAsync(iWsEndUserGetHypervisorTemplateDetailsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetHypervisorTemplateDetailsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudPricingTypesAsync(iWsEndUserGetPrivateCloudPricingTypesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudPricingTypesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudResourcesAsync(iWsEndUserGetPrivateCloudResourcesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudResourcesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudCustomProductsAsync(iWsEndUserGetPrivateCloudCustomProductsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudCustomProductsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPublicVLanForUserAsync(iWsEndUserGetPublicVLanForUserInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPublicVLanForUserOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ManageIPAsync(iWsEndUserManageIpInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserManageIpOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudNamingBlacklistsAsync(iWsEndUserGetPrivateCloudNamingBlacklistsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudNamingBlacklistsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CancelDeleteVirtualMachineAsync(iWsEndUserCancelDeleteVirtualMachineInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserCancelDeleteVirtualMachineOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CreateVPCUserAsync(iWsEndUserCreateVpcUserInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserCreateVpcUserOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVPCUsersAsync(iWsEndUserGetVpcUsersInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVpcUsersOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    RequestVPCUserOtpTokenAsync(iWsEndUserRequestVpcUserOtpTokenInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserRequestVpcUserOtpTokenOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetVPCOtpStatusAsync(iWsEndUserSetVpcOtpStatusInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetVpcOtpStatusOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ResetVPCUserPasswordAsync(iWsEndUserResetVpcUserPasswordInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserResetVpcUserPasswordOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    DeleteVPCUserAsync(iWsEndUserDeleteVpcUserInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserDeleteVpcUserOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    VerifyVPCUserOtpAsync(iWsEndUserVerifyVpcUserOtpInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserVerifyVpcUserOtpOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVPCRolesAsync(iWsEndUserGetVpcRolesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVpcRolesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    UpdateVPCUserAsync(iWsEndUserUpdateVpcUserInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserUpdateVpcUserOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SyncVPCUserOtpTokenAsync(iWsEndUserSyncVpcUserOtpTokenInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSyncVpcUserOtpTokenOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    RemoveOldIpFromVPSAsync(iWsEndUserRemoveOldIpFromVpsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserRemoveOldIpFromVpsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetUserAuthenticationTokenAsync(getUserAuthenticationToken: GetUserAuthenticationToken, options?: ISoapExOptions): Promise<[result: GetUserAuthenticationTokenResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCompanyByUrlAsync(getCompanyByUrl: GetCompanyByUrl, options?: ISoapExOptions): Promise<[result: GetCompanyByUrlResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTypesAsync(getHypervisorTypes: GetHypervisorTypes, options?: ISoapExOptions): Promise<[result: GetHypervisorTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorsAsync(getHypervisors: GetHypervisors, options?: ISoapExOptions): Promise<[result: GetHypervisorsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetApplianceTypesAsync(iWsEndUserGetApplianceTypesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetApplianceTypesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAllTagsAsync(iWsEndUserGetAllTagsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetAllTagsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorDetailsAsync(getHypervisorDetails: GetHypervisorDetails, options?: ISoapExOptions): Promise<[result: GetHypervisorDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualDatacenterAsync(getVirtualDatacenter: GetVirtualDatacenter, options?: ISoapExOptions): Promise<[result: GetVirtualDatacenterResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualDatacenterCostAsync(getVirtualDatacenterCost: GetVirtualDatacenterCost, options?: ISoapExOptions): Promise<[result: GetVirtualDatacenterCostResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServersAsync(getServers: GetServers, options?: ISoapExOptions): Promise<[result: GetServersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServersListAsync(iWsEndUserGetServersListInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetServersListOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPagedServersListAsync(iWsEndUserGetPagedServersListInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPagedServersListOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServerDetailsAsync(getServerDetails: GetServerDetails, options?: ISoapExOptions): Promise<[result: GetServerDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCreditAsync(getCredit: GetCredit, options?: ISoapExOptions): Promise<[result: GetCreditResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPriceListAsync(getPriceList: GetPriceList, options?: ISoapExOptions): Promise<[result: GetPriceListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedVLansAsync(getPurchasedVLans: GetPurchasedVLans, options?: ISoapExOptions): Promise<[result: GetPurchasedVLansResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedIpAddressesAsync(getPurchasedIpAddresses: GetPurchasedIpAddresses, options?: ISoapExOptions): Promise<[result: GetPurchasedIpAddressesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetOpenStackFlavorsAsync(iWsEndUserGetOpenStackFlavorsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetOpenStackFlavorsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetJobsAsync(getJobs: GetJobs, options?: ISoapExOptions): Promise<[result: GetJobsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLogsAsync(getLogs: GetLogs, options?: ISoapExOptions): Promise<[result: GetLogsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetOperationsLogAsync(iWsEndUserGetOperationsLogInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetOperationsLogOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetDatacenterConfigurationsAsync(getDatacenterConfigurations: GetDatacenterConfigurations, options?: ISoapExOptions): Promise<[result: GetDatacenterConfigurationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCustomVirtualDisksAsync(getCustomVirtualDisks: GetCustomVirtualDisks, options?: ISoapExOptions): Promise<[result: GetCustomVirtualDisksResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetIsosAsync(getIsos: GetIsos, options?: ISoapExOptions): Promise<[result: GetIsosResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetUserInfoAsync(getUserInfo: GetUserInfo, options?: ISoapExOptions): Promise<[result: GetUserInfoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedFTPAsync(getPurchasedFtp: GetPurchasedFtp1, options?: ISoapExOptions): Promise<[result: GetPurchasedFtpResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetNewsAsync(getNews: GetNews, options?: ISoapExOptions): Promise<[result: GetNewsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetScheduledOperationsAsync(getScheduledOperations: GetScheduledOperations, options?: ISoapExOptions): Promise<[result: GetScheduledOperationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServerSchedulesLogsAsync(getServerSchedulesLogs: GetServerSchedulesLogs, options?: ISoapExOptions): Promise<[result: GetServerSchedulesLogsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSchedulerDataTypesAsync(getSchedulerDataTypes: GetSchedulerDataTypes, options?: ISoapExOptions): Promise<[result: GetSchedulerDataTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetTemplateDetailsAsync(getTemplateDetails: GetTemplateDetails, options?: ISoapExOptions): Promise<[result: GetTemplateDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetTemplateCategoriesAsync(getTemplateCategories: GetTemplateCategories, options?: ISoapExOptions): Promise<[result: GetTemplateCategoriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetTemplateLicensesAsync(iWsEndUserGetTemplateLicensesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetTemplateLicensesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAvailablePersonalTemplatesAsync(getAvailablePersonalTemplates: GetAvailablePersonalTemplates, options?: ISoapExOptions): Promise<[result: GetAvailablePersonalTemplatesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSystemStatusHistoryAsync(getSystemStatusHistory: GetSystemStatusHistory, options?: ISoapExOptions): Promise<[result: GetSystemStatusHistoryResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSharedStoragesAsync(getSharedStorages: GetSharedStorages, options?: ISoapExOptions): Promise<[result: GetSharedStoragesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAdditionalServicesAsync(getAdditionalServices: GetAdditionalServices, options?: ISoapExOptions): Promise<[result: GetAdditionalServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedAdditionalServicesAsync(getPurchasedAdditionalServices: GetPurchasedAdditionalServices, options?: ISoapExOptions): Promise<[result: GetPurchasedAdditionalServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetRemoteAccessUrlAsync(getRemoteAccessUrl: GetRemoteAccessUrl, options?: ISoapExOptions): Promise<[result: GetRemoteAccessUrlResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetRemoteAccessUrlExAsync(iWsEndUserGetRemoteAccessUrlExInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetRemoteAccessUrlExOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetRemoteAccessUrlAsyncResponseAsync(iWsEndUserGetRemoteAccessUrlAsyncResponseInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetRemoteAccessUrlAsyncResponseOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVMPerformanceAsync(iWsEndUserGetVmPerformanceInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVmPerformanceOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVMPerformancesAsync(iWsEndUserGetVmPerformancesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVmPerformancesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVMMetricsAsync(iWsEndUserGetVmMetricsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVmMetricsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualMachineCostAsync(iWsEndUserGetVirtualMachineCostInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVirtualMachineCostOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualMachineResourcesProductsAsync(iWsEndUserGetVirtualMachineResourcesProductsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetVirtualMachineResourcesProductsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CheckEnqueueServerCreationAsync(checkEnqueueServerCreation: CheckEnqueueServerCreation, options?: ISoapExOptions): Promise<[result: CheckEnqueueServerCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerCreationAsync(setEnqueueServerCreation: SetEnqueueServerCreation, options?: ISoapExOptions): Promise<[result: SetEnqueueServerCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerCreationExAsync(iWsEndUserSetEnqueueServerCreationExInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueServerCreationExOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerUpdateAsync(setEnqueueServerUpdate: SetEnqueueServerUpdate, options?: ISoapExOptions): Promise<[result: SetEnqueueServerUpdateResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerStartAsync(setEnqueueServerStart: SetEnqueueServerStart, options?: ISoapExOptions): Promise<[result: SetEnqueueServerStartResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerStopAsync(setEnqueueServerStop: SetEnqueueServerStop, options?: ISoapExOptions): Promise<[result: SetEnqueueServerStopResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerDeletionAsync(setEnqueueServerDeletion: SetEnqueueServerDeletion, options?: ISoapExOptions): Promise<[result: SetEnqueueServerDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerResetAsync(setEnqueueServerReset: SetEnqueueServerReset, options?: ISoapExOptions): Promise<[result: SetEnqueueServerResetResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerRestartAsync(setEnqueueServerRestart: SetEnqueueServerRestart, options?: ISoapExOptions): Promise<[result: SetEnqueueServerRestartResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerPowerOffAsync(setEnqueueServerPowerOff: SetEnqueueServerPowerOff, options?: ISoapExOptions): Promise<[result: SetEnqueueServerPowerOffResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerArchiviationAsync(setEnqueueServerArchiviation: SetEnqueueServerArchiviation, options?: ISoapExOptions): Promise<[result: SetEnqueueServerArchiviationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerRestoreAsync(setEnqueueServerRestore: SetEnqueueServerRestore, options?: ISoapExOptions): Promise<[result: SetEnqueueServerRestoreResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRenameServerAsync(setRenameServer: SetRenameServer, options?: ISoapExOptions): Promise<[result: SetRenameServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueMountDvdIsoAsync(setEnqueueMountDvdIso: SetEnqueueMountDvdIso, options?: ISoapExOptions): Promise<[result: SetEnqueueMountDvdIsoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueUnmountDvdIsoAsync(setEnqueueUnmountDvdIso: SetEnqueueUnmountDvdIso, options?: ISoapExOptions): Promise<[result: SetEnqueueUnmountDvdIsoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueVirtualDiskExportAsync(setEnqueueVirtualDiskExport: SetEnqueueVirtualDiskExport, options?: ISoapExOptions): Promise<[result: SetEnqueueVirtualDiskExportResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueVirtualDiskManageAsync(setEnqueueVirtualDiskManage: SetEnqueueVirtualDiskManage, options?: ISoapExOptions): Promise<[result: SetEnqueueVirtualDiskManageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerSnapshotAsync(setEnqueueServerSnapshot: SetEnqueueServerSnapshot, options?: ISoapExOptions): Promise<[result: SetEnqueueServerSnapshotResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePersonalTemplateCreationAsync(setEnqueuePersonalTemplateCreation: SetEnqueuePersonalTemplateCreation, options?: ISoapExOptions): Promise<[result: SetEnqueuePersonalTemplateCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetChangeNoteServerAsync(setChangeNoteServer: SetChangeNoteServer, options?: ISoapExOptions): Promise<[result: SetChangeNoteServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetPurchaseIpAddressAsync(setPurchaseIpAddress: SetPurchaseIpAddress, options?: ISoapExOptions): Promise<[result: SetPurchaseIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveIpAddressAsync(setRemoveIpAddress: SetRemoveIpAddress, options?: ISoapExOptions): Promise<[result: SetRemoveIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueAssociateIpAddressAsync(setEnqueueAssociateIpAddress: SetEnqueueAssociateIpAddress, options?: ISoapExOptions): Promise<[result: SetEnqueueAssociateIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueDeassociateIpAddressAsync(setEnqueueDeassociateIpAddress: SetEnqueueDeassociateIpAddress, options?: ISoapExOptions): Promise<[result: SetEnqueueDeassociateIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetPurchaseVLanAsync(setPurchaseVLan: SetPurchaseVLan, options?: ISoapExOptions): Promise<[result: SetPurchaseVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveVLanAsync(setRemoveVLan: SetRemoveVLan, options?: ISoapExOptions): Promise<[result: SetRemoveVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRenameVLanAsync(setRenameVLan: SetRenameVLan, options?: ISoapExOptions): Promise<[result: SetRenameVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueAssociateVLanAsync(setEnqueueAssociateVLan: SetEnqueueAssociateVLan, options?: ISoapExOptions): Promise<[result: SetEnqueueAssociateVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueDeassociateVLanAsync(setEnqueueDeassociateVLan: SetEnqueueDeassociateVLan, options?: ISoapExOptions): Promise<[result: SetEnqueueDeassociateVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueCreateFTPAccountAsync(setEnqueueCreateFtpAccount: SetEnqueueCreateFtpAccount1, options?: ISoapExOptions): Promise<[result: SetEnqueueCreateFtpAccountResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueResizeFTPAccountAsync(setEnqueueResizeFtpAccount: SetEnqueueResizeFtpAccount1, options?: ISoapExOptions): Promise<[result: SetEnqueueResizeFtpAccountResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetReadNewsAsync(setReadNews: SetReadNews, options?: ISoapExOptions): Promise<[result: SetReadNewsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddServerScheduledOperationAsync(setAddServerScheduledOperation: SetAddServerScheduledOperation, options?: ISoapExOptions): Promise<[result: SetAddServerScheduledOperationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdateServerScheduledOperationAsync(setUpdateServerScheduledOperation: SetUpdateServerScheduledOperation, options?: ISoapExOptions): Promise<[result: SetUpdateServerScheduledOperationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveServerScheduledOperationAsync(setRemoveServerScheduledOperation: SetRemoveServerScheduledOperation, options?: ISoapExOptions): Promise<[result: SetRemoveServerScheduledOperationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePurchaseSharedStorageAsync(setEnqueuePurchaseSharedStorage: SetEnqueuePurchaseSharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueuePurchaseSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueRemoveSharedStorageAsync(setEnqueueRemoveSharedStorage: SetEnqueueRemoveSharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueueRemoveSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifySharedStorageAsync(setEnqueueModifySharedStorage: SetEnqueueModifySharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueueModifySharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueAddIQNSharedStorageAsync(setEnqueueAddIqnSharedStorage: SetEnqueueAddIqnSharedStorage1, options?: ISoapExOptions): Promise<[result: SetEnqueueAddIqnSharedStorageResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueRemoveIQNSharedStorageAsync(setEnqueueRemoveIqnSharedStorage: SetEnqueueRemoveIqnSharedStorage1, options?: ISoapExOptions): Promise<[result: SetEnqueueRemoveIqnSharedStorageResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRenameSharedStorageAsync(setRenameSharedStorage: SetRenameSharedStorage, options?: ISoapExOptions): Promise<[result: SetRenameSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdatePersonalTemplateAsync(setUpdatePersonalTemplate: SetUpdatePersonalTemplate, options?: ISoapExOptions): Promise<[result: SetUpdatePersonalTemplateResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemovePersonalTemplateAsync(setRemovePersonalTemplate: SetRemovePersonalTemplate, options?: ISoapExOptions): Promise<[result: SetRemovePersonalTemplateResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetPurchasedAdditionalServicesAsync(setPurchasedAdditionalServices: SetPurchasedAdditionalServices, options?: ISoapExOptions): Promise<[result: SetPurchasedAdditionalServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetControlToolActiveAsync(setControlToolActive: SetControlToolActive, options?: ISoapExOptions): Promise<[result: SetControlToolActiveResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetControlToolDisableAsync(setControlToolDisable: SetControlToolDisable, options?: ISoapExOptions): Promise<[result: SetControlToolDisableResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetControlToolCheckAsync(getControlToolCheck: GetControlToolCheck, options?: ISoapExOptions): Promise<[result: GetControlToolCheckResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetControlToolActivationRequestsAsync(getControlToolActivationRequests: GetControlToolActivationRequests, options?: ISoapExOptions): Promise<[result: GetControlToolActivationRequestsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetControlToolActivationRequestAsync(setControlToolActivationRequest: SetControlToolActivationRequest, options?: ISoapExOptions): Promise<[result: SetControlToolActivationRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetNetworkAdapterConfigurationAsync(getNetworkAdapterConfiguration: GetNetworkAdapterConfiguration, options?: ISoapExOptions): Promise<[result: GetNetworkAdapterConfigurationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetControlToolCommandResultAsync(getControlToolCommandResult: GetControlToolCommandResult, options?: ISoapExOptions): Promise<[result: GetControlToolCommandResultResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueUpdateControlToolAsync(setEnqueueUpdateControlTool: SetEnqueueUpdateControlTool, options?: ISoapExOptions): Promise<[result: SetEnqueueUpdateControlToolResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetScheduleOccurrencesAsync(getScheduleOccurrences: GetScheduleOccurrences, options?: ISoapExOptions): Promise<[result: GetScheduleOccurrencesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVDCGraphAsync(getVdcGraph: GetVdcGraph1, options?: ISoapExOptions): Promise<[result: GetVdcGraphResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddVDCGraphAsync(setAddVdcGraph: SetAddVdcGraph1, options?: ISoapExOptions): Promise<[result: SetAddVdcGraphResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdateVDCGraphAsync(setUpdateVdcGraph: SetUpdateVdcGraph1, options?: ISoapExOptions): Promise<[result: SetUpdateVdcGraphResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAssistanceLanguagesAsync(getAssistanceLanguages: GetAssistanceLanguages, options?: ISoapExOptions): Promise<[result: GetAssistanceLanguagesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAssistanceLanguagesListAsync(getAssistanceLanguagesList: GetAssistanceLanguagesList, options?: ISoapExOptions): Promise<[result: GetAssistanceLanguagesListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdateAssistanceRequestAsync(setUpdateAssistanceRequest: SetUpdateAssistanceRequest, options?: ISoapExOptions): Promise<[result: SetUpdateAssistanceRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAssistanceRequestDetailsAsync(getAssistanceRequestDetails: GetAssistanceRequestDetails, options?: ISoapExOptions): Promise<[result: GetAssistanceRequestDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAssistanceQuotationAcceptanceAsync(setAssistanceQuotationAcceptance: SetAssistanceQuotationAcceptance, options?: ISoapExOptions): Promise<[result: SetAssistanceQuotationAcceptanceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetSendAssistanceRequestAsync(setSendAssistanceRequest: SetSendAssistanceRequest, options?: ISoapExOptions): Promise<[result: SetSendAssistanceRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetInsertAssistanceRequestAsync(setInsertAssistanceRequest: SetInsertAssistanceRequest, options?: ISoapExOptions): Promise<[result: SetInsertAssistanceRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetUserAssistanceRequestsAsync(getUserAssistanceRequests: GetUserAssistanceRequests, options?: ISoapExOptions): Promise<[result: GetUserAssistanceRequestsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePurchasePrivateCloudAsync(iWsEndUserSetEnqueuePurchasePrivateCloudInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueuePurchasePrivateCloudOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudResourcesTypesAsync(iWsEndUserGetPrivateCloudResourcesTypesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudResourcesTypesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudResourcesTypes2Async(iWsEndUserGetPrivateCloudResourcesTypes2InputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudResourcesTypes2OutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudsAsync(iWsEndUserGetPurchasedPrivateCloudsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPurchasedPrivateCloudsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudDetailsAsync(iWsEndUserGetPurchasedPrivateCloudDetailsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPurchasedPrivateCloudDetailsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudDetails2Async(iWsEndUserGetPurchasedPrivateCloudDetails2InputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPurchasedPrivateCloudDetails2OutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifyPrivateCloudResourcesAsync(iWsEndUserSetEnqueueModifyPrivateCloudResourcesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueModifyPrivateCloudResourcesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePrivateCloudDeletionAsync(iWsEndUserSetEnqueuePrivateCloudDeletionInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueuePrivateCloudDeletionOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CancelDeletePrivateCloudInstanceAsync(iWsEndUserCancelDeletePrivateCloudInstanceInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserCancelDeletePrivateCloudInstanceOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePrivateCloudActivationAsync(iWsEndUserSetEnqueuePrivateCloudActivationInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueuePrivateCloudActivationOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudOrganizationsAsync(iWsEndUserGetPrivateCloudOrganizationsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudOrganizationsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudOrganizationDetailsAsync(iWsEndUserGetPrivateCloudOrganizationDetailsInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetPrivateCloudOrganizationDetailsOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHybridLinksbyOrgAsync(iWsEndUserGetHybridLinksbyOrgInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetHybridLinksbyOrgOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetActivatedPrivateCloudFeaturesAsync(iWsEndUserGetActivatedPrivateCloudFeaturesInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserGetActivatedPrivateCloudFeaturesOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifyPrivateCloudOrganizationAsync(iWsEndUserSetEnqueueModifyPrivateCloudOrganizationInputMessage: {}, options?: ISoapExOptions): Promise<[result: IWsEndUserSetEnqueueModifyPrivateCloudOrganizationOutputMessage1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerCreationAsync(setEnqueueLoadBalancerCreation: SetEnqueueLoadBalancerCreation, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerDeletionAsync(setEnqueueLoadBalancerDeletion: SetEnqueueLoadBalancerDeletion, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancersAsync(getLoadBalancers: GetLoadBalancers, options?: ISoapExOptions): Promise<[result: GetLoadBalancersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
}

/** Create ArubacloudSvcClient */
export function createClientAsync(...args: Parameters<typeof soapCreateClientAsync>): Promise<ArubacloudSvcClient> {
    return soapCreateClientAsync(args[0], args[1], args[2]) as any;
}
