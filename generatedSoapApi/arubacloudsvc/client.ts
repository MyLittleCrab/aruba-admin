import { Client as SoapClient, createClientAsync as soapCreateClientAsync, IExOptions as ISoapExOptions } from "soap";
import { GetLoadBalancerLoads } from "./definitions/GetLoadBalancerLoads";
import { GetLoadBalancerLoadsResponse } from "./definitions/GetLoadBalancerLoadsResponse";
import { GetLoadBalancerRuleStatistics } from "./definitions/GetLoadBalancerRuleStatistics";
import { GetLoadBalancerRuleStatisticsResponse } from "./definitions/GetLoadBalancerRuleStatisticsResponse";
import { SetEnqueueLoadBalancerPowerOff } from "./definitions/SetEnqueueLoadBalancerPowerOff";
import { SetEnqueueLoadBalancerPowerOffResponse } from "./definitions/SetEnqueueLoadBalancerPowerOffResponse";
import { GetLoadBalancerNotifications } from "./definitions/GetLoadBalancerNotifications";
import { GetLoadBalancerNotificationsResponse } from "./definitions/GetLoadBalancerNotificationsResponse";
import { SetEnqueueLoadBalancerStart } from "./definitions/SetEnqueueLoadBalancerStart";
import { SetEnqueueLoadBalancerStartResponse } from "./definitions/SetEnqueueLoadBalancerStartResponse";
import { SetAddLoadBalancerContacts } from "./definitions/SetAddLoadBalancerContacts";
import { SetAddLoadBalancerContactsResponse } from "./definitions/SetAddLoadBalancerContactsResponse";
import { SetRemoveLoadBalancerContacts } from "./definitions/SetRemoveLoadBalancerContacts";
import { SetRemoveLoadBalancerContactsResponse } from "./definitions/SetRemoveLoadBalancerContactsResponse";
import { SetEnqueueLoadBalancerAddInstances } from "./definitions/SetEnqueueLoadBalancerAddInstances";
import { SetEnqueueLoadBalancerAddInstancesResponse } from "./definitions/SetEnqueueLoadBalancerAddInstancesResponse";
import { SetEnqueueLoadBalancerRemoveInstances } from "./definitions/SetEnqueueLoadBalancerRemoveInstances";
import { SetEnqueueLoadBalancerRemoveInstancesResponse } from "./definitions/SetEnqueueLoadBalancerRemoveInstancesResponse";
import { SetModifyLoadBalancer } from "./definitions/SetModifyLoadBalancer";
import { SetModifyLoadBalancerResponse } from "./definitions/SetModifyLoadBalancerResponse";
import { SetAddLoadBalancerRule } from "./definitions/SetAddLoadBalancerRule";
import { SetAddLoadBalancerRuleResponse } from "./definitions/SetAddLoadBalancerRuleResponse";
import { SetRemoveLoadBalancerRule } from "./definitions/SetRemoveLoadBalancerRule";
import { SetRemoveLoadBalancerRuleResponse } from "./definitions/SetRemoveLoadBalancerRuleResponse";
import { SetEnqueueReinitializeLoadBalancer } from "./definitions/SetEnqueueReinitializeLoadBalancer";
import { SetEnqueueReinitializeLoadBalancerResponse } from "./definitions/SetEnqueueReinitializeLoadBalancerResponse";
import { GetPreConfiguredPackages } from "./definitions/GetPreConfiguredPackages";
import { GetPreConfiguredPackagesResponse } from "./definitions/GetPreConfiguredPackagesResponse";
import { GetAdditionalIpServices } from "./definitions/GetAdditionalIpServices";
import { GetAdditionalIpServicesResponse } from "./definitions/GetAdditionalIpServicesResponse";
import { SetEnqueueReinitializeServer } from "./definitions/SetEnqueueReinitializeServer";
import { SetEnqueueReinitializeServerResponse } from "./definitions/SetEnqueueReinitializeServerResponse";
import { GetAllCloudIpAddresses } from "./definitions/GetAllCloudIpAddresses";
import { GetAllCloudIpAddressesResponse } from "./definitions/GetAllCloudIpAddressesResponse";
import { SetEnqueueSetReverseDns } from "./definitions/SetEnqueueSetReverseDns";
import { SetEnqueueSetReverseDnsResponse } from "./definitions/SetEnqueueSetReverseDnsResponse";
import { SetEnqueueResetReverseDns } from "./definitions/SetEnqueueResetReverseDns";
import { SetEnqueueResetReverseDnsResponse } from "./definitions/SetEnqueueResetReverseDnsResponse";
import { GetReverseDns } from "./definitions/GetReverseDns";
import { GetReverseDnsResponse } from "./definitions/GetReverseDnsResponse";
import { IsLuckySmartAvailable } from "./definitions/IsLuckySmartAvailable";
import { IsLuckySmartAvailableResponse } from "./definitions/IsLuckySmartAvailableResponse";
import { GetLastSoldOutSettingItemList } from "./definitions/GetLastSoldOutSettingItemList";
import { GetLastSoldOutSettingItemListResponse } from "./definitions/GetLastSoldOutSettingItemListResponse";
import { GetHybridLinks } from "./definitions/GetHybridLinks";
import { GetHybridLinksResponse } from "./definitions/GetHybridLinksResponse";
import { GetHybridLinksPricingTypes } from "./definitions/GetHybridLinksPricingTypes";
import { GetHybridLinksPricingTypesResponse } from "./definitions/GetHybridLinksPricingTypesResponse";
import { SetEnqueueCreateHybridLink } from "./definitions/SetEnqueueCreateHybridLink";
import { SetEnqueueCreateHybridLinkResponse } from "./definitions/SetEnqueueCreateHybridLinkResponse";
import { SetEnqueueDeleteHybridLink } from "./definitions/SetEnqueueDeleteHybridLink";
import { SetEnqueueDeleteHybridLinkResponse } from "./definitions/SetEnqueueDeleteHybridLinkResponse";
import { GetPurchasedPrivateCloudsBase } from "./definitions/GetPurchasedPrivateCloudsBase";
import { GetPurchasedPrivateCloudsBaseResponse } from "./definitions/GetPurchasedPrivateCloudsBaseResponse";
import { GetCountries } from "./definitions/GetCountries";
import { GetCountriesResponse } from "./definitions/GetCountriesResponse";
import { GetSharedStoragePricingTypes } from "./definitions/GetSharedStoragePricingTypes";
import { GetSharedStoragePricingTypesResponse } from "./definitions/GetSharedStoragePricingTypesResponse";
import { GetSharedStorageDetails } from "./definitions/GetSharedStorageDetails";
import { GetSharedStorageDetailsResponse } from "./definitions/GetSharedStorageDetailsResponse";
import { RenameHybridLink } from "./definitions/RenameHybridLink";
import { RenameHybridLinkResponse } from "./definitions/RenameHybridLinkResponse";
import { PlannedChangePrivateCloudWindowsLicenseDeletion } from "./definitions/PlannedChangePrivateCloudWindowsLicenseDeletion";
import { PlannedChangePrivateCloudWindowsLicenseDeletionResponse } from "./definitions/PlannedChangePrivateCloudWindowsLicenseDeletionResponse";
import { PlannedChangePrivateCloudLicenseDeletion } from "./definitions/PlannedChangePrivateCloudLicenseDeletion";
import { PlannedChangePrivateCloudLicenseDeletionResponse } from "./definitions/PlannedChangePrivateCloudLicenseDeletionResponse";
import { ChangePrivateCloudPassword } from "./definitions/ChangePrivateCloudPassword";
import { ChangePrivateCloudPasswordResponse } from "./definitions/ChangePrivateCloudPasswordResponse";
import { ChangeZertoPassword } from "./definitions/ChangeZertoPassword";
import { ChangeZertoPasswordResponse } from "./definitions/ChangeZertoPasswordResponse";
import { GetVirtualMachinePricingTypes } from "./definitions/GetVirtualMachinePricingTypes";
import { GetVirtualMachinePricingTypesResponse } from "./definitions/GetVirtualMachinePricingTypesResponse";
import { SetEnqueueModifyVirtualMachinePackage } from "./definitions/SetEnqueueModifyVirtualMachinePackage";
import { SetEnqueueModifyVirtualMachinePackageResponse } from "./definitions/SetEnqueueModifyVirtualMachinePackageResponse";
import { ServerPlannedChangeDeletion } from "./definitions/ServerPlannedChangeDeletion";
import { ServerPlannedChangeDeletionResponse } from "./definitions/ServerPlannedChangeDeletionResponse";
import { GetHypervisorTemplatesPriority } from "./definitions/GetHypervisorTemplatesPriority";
import { GetHypervisorTemplatesPriorityResponse } from "./definitions/GetHypervisorTemplatesPriorityResponse";
import { GetHypervisorTemplates } from "./definitions/GetHypervisorTemplates";
import { GetHypervisorTemplatesResponse } from "./definitions/GetHypervisorTemplatesResponse";
import { GetHypervisorTemplateDetails } from "./definitions/GetHypervisorTemplateDetails";
import { GetHypervisorTemplateDetailsResponse } from "./definitions/GetHypervisorTemplateDetailsResponse";
import { GetPrivateCloudPricingTypes } from "./definitions/GetPrivateCloudPricingTypes";
import { GetPrivateCloudPricingTypesResponse } from "./definitions/GetPrivateCloudPricingTypesResponse";
import { GetPrivateCloudResources } from "./definitions/GetPrivateCloudResources";
import { GetPrivateCloudResourcesResponse } from "./definitions/GetPrivateCloudResourcesResponse";
import { GetPrivateCloudCustomProducts } from "./definitions/GetPrivateCloudCustomProducts";
import { GetPrivateCloudCustomProductsResponse } from "./definitions/GetPrivateCloudCustomProductsResponse";
import { GetPublicVLanForUser } from "./definitions/GetPublicVLanForUser";
import { GetPublicVLanForUserResponse } from "./definitions/GetPublicVLanForUserResponse";
import { ManageIp } from "./definitions/ManageIp";
import { ManageIpResponse } from "./definitions/ManageIpResponse";
import { GetPrivateCloudNamingBlacklists } from "./definitions/GetPrivateCloudNamingBlacklists";
import { GetPrivateCloudNamingBlacklistsResponse } from "./definitions/GetPrivateCloudNamingBlacklistsResponse";
import { CancelDeleteVirtualMachine } from "./definitions/CancelDeleteVirtualMachine";
import { CancelDeleteVirtualMachineResponse } from "./definitions/CancelDeleteVirtualMachineResponse";
import { CreateVpcUser } from "./definitions/CreateVpcUser";
import { CreateVpcUserResponse } from "./definitions/CreateVpcUserResponse";
import { GetVpcUsers } from "./definitions/GetVpcUsers";
import { GetVpcUsersResponse } from "./definitions/GetVpcUsersResponse";
import { RequestVpcUserOtpToken } from "./definitions/RequestVpcUserOtpToken";
import { RequestVpcUserOtpTokenResponse } from "./definitions/RequestVpcUserOtpTokenResponse";
import { SetVpcOtpStatus } from "./definitions/SetVpcOtpStatus";
import { SetVpcOtpStatusResponse } from "./definitions/SetVpcOtpStatusResponse";
import { ResetVpcUserPassword } from "./definitions/ResetVpcUserPassword";
import { ResetVpcUserPasswordResponse } from "./definitions/ResetVpcUserPasswordResponse";
import { DeleteVpcUser } from "./definitions/DeleteVpcUser";
import { DeleteVpcUserResponse } from "./definitions/DeleteVpcUserResponse";
import { VerifyVpcUserOtp } from "./definitions/VerifyVpcUserOtp";
import { VerifyVpcUserOtpResponse } from "./definitions/VerifyVpcUserOtpResponse";
import { GetVpcRoles } from "./definitions/GetVpcRoles";
import { GetVpcRolesResponse } from "./definitions/GetVpcRolesResponse";
import { UpdateVpcUser } from "./definitions/UpdateVpcUser";
import { UpdateVpcUserResponse } from "./definitions/UpdateVpcUserResponse";
import { SyncVpcUserOtpToken } from "./definitions/SyncVpcUserOtpToken";
import { SyncVpcUserOtpTokenResponse } from "./definitions/SyncVpcUserOtpTokenResponse";
import { RemoveOldIpFromVps } from "./definitions/RemoveOldIpFromVps";
import { RemoveOldIpFromVpsResponse } from "./definitions/RemoveOldIpFromVpsResponse";
import { GetUserAuthenticationToken } from "./definitions/GetUserAuthenticationToken";
import { GetUserAuthenticationTokenResponse } from "./definitions/GetUserAuthenticationTokenResponse";
import { GetCompanyByUrl } from "./definitions/GetCompanyByUrl";
import { GetCompanyByUrlResponse } from "./definitions/GetCompanyByUrlResponse";
import { GetHypervisorTypes } from "./definitions/GetHypervisorTypes";
import { GetHypervisorTypesResponse } from "./definitions/GetHypervisorTypesResponse";
import { GetHypervisors } from "./definitions/GetHypervisors";
import { GetHypervisorsResponse } from "./definitions/GetHypervisorsResponse";
import { GetApplianceTypes } from "./definitions/GetApplianceTypes";
import { GetApplianceTypesResponse } from "./definitions/GetApplianceTypesResponse";
import { GetAllTags } from "./definitions/GetAllTags";
import { GetAllTagsResponse } from "./definitions/GetAllTagsResponse";
import { GetHypervisorDetails } from "./definitions/GetHypervisorDetails";
import { GetHypervisorDetailsResponse } from "./definitions/GetHypervisorDetailsResponse";
import { GetVirtualDatacenter } from "./definitions/GetVirtualDatacenter";
import { GetVirtualDatacenterResponse } from "./definitions/GetVirtualDatacenterResponse";
import { GetVirtualDatacenterCost } from "./definitions/GetVirtualDatacenterCost";
import { GetVirtualDatacenterCostResponse } from "./definitions/GetVirtualDatacenterCostResponse";
import { GetServers } from "./definitions/GetServers";
import { GetServersResponse } from "./definitions/GetServersResponse";
import { GetServersList } from "./definitions/GetServersList";
import { GetServersListResponse } from "./definitions/GetServersListResponse";
import { GetPagedServersList } from "./definitions/GetPagedServersList";
import { GetPagedServersListResponse } from "./definitions/GetPagedServersListResponse";
import { GetServerDetails } from "./definitions/GetServerDetails";
import { GetServerDetailsResponse } from "./definitions/GetServerDetailsResponse";
import { GetCredit } from "./definitions/GetCredit";
import { GetCreditResponse } from "./definitions/GetCreditResponse";
import { GetPriceList } from "./definitions/GetPriceList";
import { GetPriceListResponse } from "./definitions/GetPriceListResponse";
import { GetPurchasedVLans } from "./definitions/GetPurchasedVLans";
import { GetPurchasedVLansResponse } from "./definitions/GetPurchasedVLansResponse";
import { GetPurchasedIpAddresses } from "./definitions/GetPurchasedIpAddresses";
import { GetPurchasedIpAddressesResponse } from "./definitions/GetPurchasedIpAddressesResponse";
import { GetOpenStackFlavors } from "./definitions/GetOpenStackFlavors";
import { GetOpenStackFlavorsResponse } from "./definitions/GetOpenStackFlavorsResponse";
import { GetJobs } from "./definitions/GetJobs";
import { GetJobsResponse } from "./definitions/GetJobsResponse";
import { GetLogs } from "./definitions/GetLogs";
import { GetLogsResponse } from "./definitions/GetLogsResponse";
import { GetOperationsLog } from "./definitions/GetOperationsLog";
import { GetOperationsLogResponse } from "./definitions/GetOperationsLogResponse";
import { GetDatacenterConfigurations } from "./definitions/GetDatacenterConfigurations";
import { GetDatacenterConfigurationsResponse } from "./definitions/GetDatacenterConfigurationsResponse";
import { GetCustomVirtualDisks } from "./definitions/GetCustomVirtualDisks";
import { GetCustomVirtualDisksResponse } from "./definitions/GetCustomVirtualDisksResponse";
import { GetIsos } from "./definitions/GetIsos";
import { GetIsosResponse } from "./definitions/GetIsosResponse";
import { GetUserInfo } from "./definitions/GetUserInfo";
import { GetUserInfoResponse } from "./definitions/GetUserInfoResponse";
import { GetPurchasedFtp } from "./definitions/GetPurchasedFtp";
import { GetPurchasedFtpResponse } from "./definitions/GetPurchasedFtpResponse";
import { GetNews } from "./definitions/GetNews";
import { GetNewsResponse } from "./definitions/GetNewsResponse";
import { GetScheduledOperations } from "./definitions/GetScheduledOperations";
import { GetScheduledOperationsResponse } from "./definitions/GetScheduledOperationsResponse";
import { GetServerSchedulesLogs } from "./definitions/GetServerSchedulesLogs";
import { GetServerSchedulesLogsResponse } from "./definitions/GetServerSchedulesLogsResponse";
import { GetSchedulerDataTypes } from "./definitions/GetSchedulerDataTypes";
import { GetSchedulerDataTypesResponse } from "./definitions/GetSchedulerDataTypesResponse";
import { GetTemplateDetails } from "./definitions/GetTemplateDetails";
import { GetTemplateDetailsResponse } from "./definitions/GetTemplateDetailsResponse";
import { GetTemplateCategories } from "./definitions/GetTemplateCategories";
import { GetTemplateCategoriesResponse } from "./definitions/GetTemplateCategoriesResponse";
import { GetTemplateLicenses } from "./definitions/GetTemplateLicenses";
import { GetTemplateLicensesResponse } from "./definitions/GetTemplateLicensesResponse";
import { GetAvailablePersonalTemplates } from "./definitions/GetAvailablePersonalTemplates";
import { GetAvailablePersonalTemplatesResponse } from "./definitions/GetAvailablePersonalTemplatesResponse";
import { GetSystemStatusHistory } from "./definitions/GetSystemStatusHistory";
import { GetSystemStatusHistoryResponse } from "./definitions/GetSystemStatusHistoryResponse";
import { GetSharedStorages } from "./definitions/GetSharedStorages";
import { GetSharedStoragesResponse } from "./definitions/GetSharedStoragesResponse";
import { GetAdditionalServices } from "./definitions/GetAdditionalServices";
import { GetAdditionalServicesResponse } from "./definitions/GetAdditionalServicesResponse";
import { GetPurchasedAdditionalServices } from "./definitions/GetPurchasedAdditionalServices";
import { GetPurchasedAdditionalServicesResponse } from "./definitions/GetPurchasedAdditionalServicesResponse";
import { GetRemoteAccessUrl } from "./definitions/GetRemoteAccessUrl";
import { GetRemoteAccessUrlResponse } from "./definitions/GetRemoteAccessUrlResponse";
import { GetRemoteAccessUrlEx } from "./definitions/GetRemoteAccessUrlEx";
import { GetRemoteAccessUrlExResponse } from "./definitions/GetRemoteAccessUrlExResponse";
import { GetRemoteAccessUrlAsyncResponse } from "./definitions/GetRemoteAccessUrlAsyncResponse";
import { GetRemoteAccessUrlAsyncResponseResponse } from "./definitions/GetRemoteAccessUrlAsyncResponseResponse";
import { GetVmPerformance } from "./definitions/GetVmPerformance";
import { GetVmPerformanceResponse } from "./definitions/GetVmPerformanceResponse";
import { GetVmPerformances } from "./definitions/GetVmPerformances";
import { GetVmPerformancesResponse } from "./definitions/GetVmPerformancesResponse";
import { GetVmMetrics } from "./definitions/GetVmMetrics";
import { GetVmMetricsResponse } from "./definitions/GetVmMetricsResponse";
import { GetVirtualMachineCost } from "./definitions/GetVirtualMachineCost";
import { GetVirtualMachineCostResponse } from "./definitions/GetVirtualMachineCostResponse";
import { GetVirtualMachineResourcesProducts } from "./definitions/GetVirtualMachineResourcesProducts";
import { GetVirtualMachineResourcesProductsResponse } from "./definitions/GetVirtualMachineResourcesProductsResponse";
import { CheckEnqueueServerCreation } from "./definitions/CheckEnqueueServerCreation";
import { CheckEnqueueServerCreationResponse } from "./definitions/CheckEnqueueServerCreationResponse";
import { SetEnqueueServerCreation } from "./definitions/SetEnqueueServerCreation";
import { SetEnqueueServerCreationResponse } from "./definitions/SetEnqueueServerCreationResponse";
import { SetEnqueueServerCreationEx } from "./definitions/SetEnqueueServerCreationEx";
import { SetEnqueueServerCreationExResponse } from "./definitions/SetEnqueueServerCreationExResponse";
import { SetEnqueueServerUpdate } from "./definitions/SetEnqueueServerUpdate";
import { SetEnqueueServerUpdateResponse } from "./definitions/SetEnqueueServerUpdateResponse";
import { SetEnqueueServerStart } from "./definitions/SetEnqueueServerStart";
import { SetEnqueueServerStartResponse } from "./definitions/SetEnqueueServerStartResponse";
import { SetEnqueueServerStop } from "./definitions/SetEnqueueServerStop";
import { SetEnqueueServerStopResponse } from "./definitions/SetEnqueueServerStopResponse";
import { SetEnqueueServerDeletion } from "./definitions/SetEnqueueServerDeletion";
import { SetEnqueueServerDeletionResponse } from "./definitions/SetEnqueueServerDeletionResponse";
import { SetEnqueueServerReset } from "./definitions/SetEnqueueServerReset";
import { SetEnqueueServerResetResponse } from "./definitions/SetEnqueueServerResetResponse";
import { SetEnqueueServerRestart } from "./definitions/SetEnqueueServerRestart";
import { SetEnqueueServerRestartResponse } from "./definitions/SetEnqueueServerRestartResponse";
import { SetEnqueueServerPowerOff } from "./definitions/SetEnqueueServerPowerOff";
import { SetEnqueueServerPowerOffResponse } from "./definitions/SetEnqueueServerPowerOffResponse";
import { SetEnqueueServerArchiviation } from "./definitions/SetEnqueueServerArchiviation";
import { SetEnqueueServerArchiviationResponse } from "./definitions/SetEnqueueServerArchiviationResponse";
import { SetEnqueueServerRestore } from "./definitions/SetEnqueueServerRestore";
import { SetEnqueueServerRestoreResponse } from "./definitions/SetEnqueueServerRestoreResponse";
import { SetRenameServer } from "./definitions/SetRenameServer";
import { SetRenameServerResponse } from "./definitions/SetRenameServerResponse";
import { SetEnqueueMountDvdIso } from "./definitions/SetEnqueueMountDvdIso";
import { SetEnqueueMountDvdIsoResponse } from "./definitions/SetEnqueueMountDvdIsoResponse";
import { SetEnqueueUnmountDvdIso } from "./definitions/SetEnqueueUnmountDvdIso";
import { SetEnqueueUnmountDvdIsoResponse } from "./definitions/SetEnqueueUnmountDvdIsoResponse";
import { SetEnqueueVirtualDiskExport } from "./definitions/SetEnqueueVirtualDiskExport";
import { SetEnqueueVirtualDiskExportResponse } from "./definitions/SetEnqueueVirtualDiskExportResponse";
import { SetEnqueueVirtualDiskManage } from "./definitions/SetEnqueueVirtualDiskManage";
import { SetEnqueueVirtualDiskManageResponse } from "./definitions/SetEnqueueVirtualDiskManageResponse";
import { SetEnqueueServerSnapshot } from "./definitions/SetEnqueueServerSnapshot";
import { SetEnqueueServerSnapshotResponse } from "./definitions/SetEnqueueServerSnapshotResponse";
import { SetEnqueuePersonalTemplateCreation } from "./definitions/SetEnqueuePersonalTemplateCreation";
import { SetEnqueuePersonalTemplateCreationResponse } from "./definitions/SetEnqueuePersonalTemplateCreationResponse";
import { SetChangeNoteServer } from "./definitions/SetChangeNoteServer";
import { SetChangeNoteServerResponse } from "./definitions/SetChangeNoteServerResponse";
import { SetPurchaseIpAddress } from "./definitions/SetPurchaseIpAddress";
import { SetPurchaseIpAddressResponse } from "./definitions/SetPurchaseIpAddressResponse";
import { SetRemoveIpAddress } from "./definitions/SetRemoveIpAddress";
import { SetRemoveIpAddressResponse } from "./definitions/SetRemoveIpAddressResponse";
import { SetEnqueueAssociateIpAddress } from "./definitions/SetEnqueueAssociateIpAddress";
import { SetEnqueueAssociateIpAddressResponse } from "./definitions/SetEnqueueAssociateIpAddressResponse";
import { SetEnqueueDeassociateIpAddress } from "./definitions/SetEnqueueDeassociateIpAddress";
import { SetEnqueueDeassociateIpAddressResponse } from "./definitions/SetEnqueueDeassociateIpAddressResponse";
import { SetPurchaseVLan } from "./definitions/SetPurchaseVLan";
import { SetPurchaseVLanResponse } from "./definitions/SetPurchaseVLanResponse";
import { SetRemoveVLan } from "./definitions/SetRemoveVLan";
import { SetRemoveVLanResponse } from "./definitions/SetRemoveVLanResponse";
import { SetRenameVLan } from "./definitions/SetRenameVLan";
import { SetRenameVLanResponse } from "./definitions/SetRenameVLanResponse";
import { SetEnqueueAssociateVLan } from "./definitions/SetEnqueueAssociateVLan";
import { SetEnqueueAssociateVLanResponse } from "./definitions/SetEnqueueAssociateVLanResponse";
import { SetEnqueueDeassociateVLan } from "./definitions/SetEnqueueDeassociateVLan";
import { SetEnqueueDeassociateVLanResponse } from "./definitions/SetEnqueueDeassociateVLanResponse";
import { SetEnqueueCreateFtpAccount } from "./definitions/SetEnqueueCreateFtpAccount";
import { SetEnqueueCreateFtpAccountResponse } from "./definitions/SetEnqueueCreateFtpAccountResponse";
import { SetEnqueueResizeFtpAccount } from "./definitions/SetEnqueueResizeFtpAccount";
import { SetEnqueueResizeFtpAccountResponse } from "./definitions/SetEnqueueResizeFtpAccountResponse";
import { SetReadNews } from "./definitions/SetReadNews";
import { SetReadNewsResponse } from "./definitions/SetReadNewsResponse";
import { SetAddServerScheduledOperation } from "./definitions/SetAddServerScheduledOperation";
import { SetAddServerScheduledOperationResponse } from "./definitions/SetAddServerScheduledOperationResponse";
import { SetUpdateServerScheduledOperation } from "./definitions/SetUpdateServerScheduledOperation";
import { SetUpdateServerScheduledOperationResponse } from "./definitions/SetUpdateServerScheduledOperationResponse";
import { SetRemoveServerScheduledOperation } from "./definitions/SetRemoveServerScheduledOperation";
import { SetRemoveServerScheduledOperationResponse } from "./definitions/SetRemoveServerScheduledOperationResponse";
import { SetEnqueuePurchaseSharedStorage } from "./definitions/SetEnqueuePurchaseSharedStorage";
import { SetEnqueuePurchaseSharedStorageResponse } from "./definitions/SetEnqueuePurchaseSharedStorageResponse";
import { SetEnqueueRemoveSharedStorage } from "./definitions/SetEnqueueRemoveSharedStorage";
import { SetEnqueueRemoveSharedStorageResponse } from "./definitions/SetEnqueueRemoveSharedStorageResponse";
import { SetEnqueueModifySharedStorage } from "./definitions/SetEnqueueModifySharedStorage";
import { SetEnqueueModifySharedStorageResponse } from "./definitions/SetEnqueueModifySharedStorageResponse";
import { SetEnqueueAddIqnSharedStorage } from "./definitions/SetEnqueueAddIqnSharedStorage";
import { SetEnqueueAddIqnSharedStorageResponse } from "./definitions/SetEnqueueAddIqnSharedStorageResponse";
import { SetEnqueueRemoveIqnSharedStorage } from "./definitions/SetEnqueueRemoveIqnSharedStorage";
import { SetEnqueueRemoveIqnSharedStorageResponse } from "./definitions/SetEnqueueRemoveIqnSharedStorageResponse";
import { SetRenameSharedStorage } from "./definitions/SetRenameSharedStorage";
import { SetRenameSharedStorageResponse } from "./definitions/SetRenameSharedStorageResponse";
import { SetUpdatePersonalTemplate } from "./definitions/SetUpdatePersonalTemplate";
import { SetUpdatePersonalTemplateResponse } from "./definitions/SetUpdatePersonalTemplateResponse";
import { SetRemovePersonalTemplate } from "./definitions/SetRemovePersonalTemplate";
import { SetRemovePersonalTemplateResponse } from "./definitions/SetRemovePersonalTemplateResponse";
import { SetPurchasedAdditionalServices } from "./definitions/SetPurchasedAdditionalServices";
import { SetPurchasedAdditionalServicesResponse } from "./definitions/SetPurchasedAdditionalServicesResponse";
import { SetControlToolActive } from "./definitions/SetControlToolActive";
import { SetControlToolActiveResponse } from "./definitions/SetControlToolActiveResponse";
import { SetControlToolDisable } from "./definitions/SetControlToolDisable";
import { SetControlToolDisableResponse } from "./definitions/SetControlToolDisableResponse";
import { GetControlToolCheck } from "./definitions/GetControlToolCheck";
import { GetControlToolCheckResponse } from "./definitions/GetControlToolCheckResponse";
import { GetControlToolActivationRequests } from "./definitions/GetControlToolActivationRequests";
import { GetControlToolActivationRequestsResponse } from "./definitions/GetControlToolActivationRequestsResponse";
import { SetControlToolActivationRequest } from "./definitions/SetControlToolActivationRequest";
import { SetControlToolActivationRequestResponse } from "./definitions/SetControlToolActivationRequestResponse";
import { GetNetworkAdapterConfiguration } from "./definitions/GetNetworkAdapterConfiguration";
import { GetNetworkAdapterConfigurationResponse } from "./definitions/GetNetworkAdapterConfigurationResponse";
import { GetControlToolCommandResult } from "./definitions/GetControlToolCommandResult";
import { GetControlToolCommandResultResponse } from "./definitions/GetControlToolCommandResultResponse";
import { SetEnqueueUpdateControlTool } from "./definitions/SetEnqueueUpdateControlTool";
import { SetEnqueueUpdateControlToolResponse } from "./definitions/SetEnqueueUpdateControlToolResponse";
import { GetScheduleOccurrences } from "./definitions/GetScheduleOccurrences";
import { GetScheduleOccurrencesResponse } from "./definitions/GetScheduleOccurrencesResponse";
import { GetVdcGraph } from "./definitions/GetVdcGraph";
import { GetVdcGraphResponse } from "./definitions/GetVdcGraphResponse";
import { SetAddVdcGraph } from "./definitions/SetAddVdcGraph";
import { SetAddVdcGraphResponse } from "./definitions/SetAddVdcGraphResponse";
import { SetUpdateVdcGraph } from "./definitions/SetUpdateVdcGraph";
import { SetUpdateVdcGraphResponse } from "./definitions/SetUpdateVdcGraphResponse";
import { GetAssistanceLanguages } from "./definitions/GetAssistanceLanguages";
import { GetAssistanceLanguagesResponse } from "./definitions/GetAssistanceLanguagesResponse";
import { GetAssistanceLanguagesList } from "./definitions/GetAssistanceLanguagesList";
import { GetAssistanceLanguagesListResponse } from "./definitions/GetAssistanceLanguagesListResponse";
import { SetUpdateAssistanceRequest } from "./definitions/SetUpdateAssistanceRequest";
import { SetUpdateAssistanceRequestResponse } from "./definitions/SetUpdateAssistanceRequestResponse";
import { GetAssistanceRequestDetails } from "./definitions/GetAssistanceRequestDetails";
import { GetAssistanceRequestDetailsResponse } from "./definitions/GetAssistanceRequestDetailsResponse";
import { SetAssistanceQuotationAcceptance } from "./definitions/SetAssistanceQuotationAcceptance";
import { SetAssistanceQuotationAcceptanceResponse } from "./definitions/SetAssistanceQuotationAcceptanceResponse";
import { SetSendAssistanceRequest } from "./definitions/SetSendAssistanceRequest";
import { SetSendAssistanceRequestResponse } from "./definitions/SetSendAssistanceRequestResponse";
import { SetInsertAssistanceRequest } from "./definitions/SetInsertAssistanceRequest";
import { SetInsertAssistanceRequestResponse } from "./definitions/SetInsertAssistanceRequestResponse";
import { GetUserAssistanceRequests } from "./definitions/GetUserAssistanceRequests";
import { GetUserAssistanceRequestsResponse } from "./definitions/GetUserAssistanceRequestsResponse";
import { SetEnqueuePurchasePrivateCloud } from "./definitions/SetEnqueuePurchasePrivateCloud";
import { SetEnqueuePurchasePrivateCloudResponse } from "./definitions/SetEnqueuePurchasePrivateCloudResponse";
import { GetPrivateCloudResourcesTypes } from "./definitions/GetPrivateCloudResourcesTypes";
import { GetPrivateCloudResourcesTypesResponse } from "./definitions/GetPrivateCloudResourcesTypesResponse";
import { GetPrivateCloudResourcesTypes2 } from "./definitions/GetPrivateCloudResourcesTypes2";
import { GetPrivateCloudResourcesTypes2Response } from "./definitions/GetPrivateCloudResourcesTypes2Response";
import { GetPurchasedPrivateClouds } from "./definitions/GetPurchasedPrivateClouds";
import { GetPurchasedPrivateCloudsResponse } from "./definitions/GetPurchasedPrivateCloudsResponse";
import { GetPurchasedPrivateCloudDetails } from "./definitions/GetPurchasedPrivateCloudDetails";
import { GetPurchasedPrivateCloudDetailsResponse } from "./definitions/GetPurchasedPrivateCloudDetailsResponse";
import { GetPurchasedPrivateCloudDetails2 } from "./definitions/GetPurchasedPrivateCloudDetails2";
import { GetPurchasedPrivateCloudDetails2Response } from "./definitions/GetPurchasedPrivateCloudDetails2Response";
import { SetEnqueueModifyPrivateCloudResources } from "./definitions/SetEnqueueModifyPrivateCloudResources";
import { SetEnqueueModifyPrivateCloudResourcesResponse } from "./definitions/SetEnqueueModifyPrivateCloudResourcesResponse";
import { SetEnqueuePrivateCloudDeletion } from "./definitions/SetEnqueuePrivateCloudDeletion";
import { SetEnqueuePrivateCloudDeletionResponse } from "./definitions/SetEnqueuePrivateCloudDeletionResponse";
import { CancelDeletePrivateCloudInstance } from "./definitions/CancelDeletePrivateCloudInstance";
import { CancelDeletePrivateCloudInstanceResponse } from "./definitions/CancelDeletePrivateCloudInstanceResponse";
import { SetEnqueuePrivateCloudActivation } from "./definitions/SetEnqueuePrivateCloudActivation";
import { SetEnqueuePrivateCloudActivationResponse } from "./definitions/SetEnqueuePrivateCloudActivationResponse";
import { GetPrivateCloudOrganizations } from "./definitions/GetPrivateCloudOrganizations";
import { GetPrivateCloudOrganizationsResponse } from "./definitions/GetPrivateCloudOrganizationsResponse";
import { GetPrivateCloudOrganizationDetails } from "./definitions/GetPrivateCloudOrganizationDetails";
import { GetPrivateCloudOrganizationDetailsResponse } from "./definitions/GetPrivateCloudOrganizationDetailsResponse";
import { GetHybridLinksbyOrg } from "./definitions/GetHybridLinksbyOrg";
import { GetHybridLinksbyOrgResponse } from "./definitions/GetHybridLinksbyOrgResponse";
import { GetActivatedPrivateCloudFeatures } from "./definitions/GetActivatedPrivateCloudFeatures";
import { GetActivatedPrivateCloudFeaturesResponse } from "./definitions/GetActivatedPrivateCloudFeaturesResponse";
import { SetEnqueueModifyPrivateCloudOrganization } from "./definitions/SetEnqueueModifyPrivateCloudOrganization";
import { SetEnqueueModifyPrivateCloudOrganizationResponse } from "./definitions/SetEnqueueModifyPrivateCloudOrganizationResponse";
import { SetEnqueueLoadBalancerCreation } from "./definitions/SetEnqueueLoadBalancerCreation";
import { SetEnqueueLoadBalancerCreationResponse } from "./definitions/SetEnqueueLoadBalancerCreationResponse";
import { SetEnqueueLoadBalancerDeletion } from "./definitions/SetEnqueueLoadBalancerDeletion";
import { SetEnqueueLoadBalancerDeletionResponse } from "./definitions/SetEnqueueLoadBalancerDeletionResponse";
import { GetLoadBalancers } from "./definitions/GetLoadBalancers";
import { GetLoadBalancersResponse } from "./definitions/GetLoadBalancersResponse";
import { GetAdditionalIpServices1 } from "./definitions/GetAdditionalIpServices1";
import { GetAdditionalIpServicesResponse1 } from "./definitions/GetAdditionalIpServicesResponse1";
import { ManageIp1 } from "./definitions/ManageIp1";
import { ManageIpResponse1 } from "./definitions/ManageIpResponse1";
import { CreateVpcUser1 } from "./definitions/CreateVpcUser1";
import { CreateVpcUserResponse1 } from "./definitions/CreateVpcUserResponse1";
import { GetVpcUsers1 } from "./definitions/GetVpcUsers1";
import { GetVpcUsersResponse2 } from "./definitions/GetVpcUsersResponse2";
import { RequestVpcUserOtpToken1 } from "./definitions/RequestVpcUserOtpToken1";
import { RequestVpcUserOtpTokenResponse1 } from "./definitions/RequestVpcUserOtpTokenResponse1";
import { SetVpcOtpStatus1 } from "./definitions/SetVpcOtpStatus1";
import { SetVpcOtpStatusResponse1 } from "./definitions/SetVpcOtpStatusResponse1";
import { ResetVpcUserPassword1 } from "./definitions/ResetVpcUserPassword1";
import { ResetVpcUserPasswordResponse1 } from "./definitions/ResetVpcUserPasswordResponse1";
import { DeleteVpcUser1 } from "./definitions/DeleteVpcUser1";
import { DeleteVpcUserResponse1 } from "./definitions/DeleteVpcUserResponse1";
import { VerifyVpcUserOtp1 } from "./definitions/VerifyVpcUserOtp1";
import { VerifyVpcUserOtpResponse1 } from "./definitions/VerifyVpcUserOtpResponse1";
import { GetVpcRoles1 } from "./definitions/GetVpcRoles1";
import { GetVpcRolesResponse1 } from "./definitions/GetVpcRolesResponse1";
import { UpdateVpcUser1 } from "./definitions/UpdateVpcUser1";
import { UpdateVpcUserResponse1 } from "./definitions/UpdateVpcUserResponse1";
import { SyncVpcUserOtpToken1 } from "./definitions/SyncVpcUserOtpToken1";
import { SyncVpcUserOtpTokenResponse1 } from "./definitions/SyncVpcUserOtpTokenResponse1";
import { RemoveOldIpFromVps1 } from "./definitions/RemoveOldIpFromVps1";
import { RemoveOldIpFromVpsResponse1 } from "./definitions/RemoveOldIpFromVpsResponse1";
import { GetPurchasedFtp1 } from "./definitions/GetPurchasedFtp1";
import { GetPurchasedFtpResponse1 } from "./definitions/GetPurchasedFtpResponse1";
import { GetVmPerformance1 } from "./definitions/GetVmPerformance1";
import { GetVmPerformanceResponse1 } from "./definitions/GetVmPerformanceResponse1";
import { GetVmPerformances1 } from "./definitions/GetVmPerformances1";
import { GetVmPerformancesResponse1 } from "./definitions/GetVmPerformancesResponse1";
import { GetVmMetrics1 } from "./definitions/GetVmMetrics1";
import { GetVmMetricsResponse1 } from "./definitions/GetVmMetricsResponse1";
import { SetEnqueueCreateFtpAccount1 } from "./definitions/SetEnqueueCreateFtpAccount1";
import { SetEnqueueCreateFtpAccountResponse1 } from "./definitions/SetEnqueueCreateFtpAccountResponse1";
import { SetEnqueueResizeFtpAccount1 } from "./definitions/SetEnqueueResizeFtpAccount1";
import { SetEnqueueResizeFtpAccountResponse1 } from "./definitions/SetEnqueueResizeFtpAccountResponse1";
import { SetEnqueueAddIqnSharedStorage1 } from "./definitions/SetEnqueueAddIqnSharedStorage1";
import { SetEnqueueAddIqnSharedStorageResponse1 } from "./definitions/SetEnqueueAddIqnSharedStorageResponse1";
import { SetEnqueueRemoveIqnSharedStorage1 } from "./definitions/SetEnqueueRemoveIqnSharedStorage1";
import { SetEnqueueRemoveIqnSharedStorageResponse1 } from "./definitions/SetEnqueueRemoveIqnSharedStorageResponse1";
import { GetVdcGraph1 } from "./definitions/GetVdcGraph1";
import { GetVdcGraphResponse1 } from "./definitions/GetVdcGraphResponse1";
import { SetAddVdcGraph1 } from "./definitions/SetAddVdcGraph1";
import { SetAddVdcGraphResponse1 } from "./definitions/SetAddVdcGraphResponse1";
import { SetUpdateVdcGraph1 } from "./definitions/SetUpdateVdcGraph1";
import { SetUpdateVdcGraphResponse1 } from "./definitions/SetUpdateVdcGraphResponse1";
import { WsEndUser } from "./services/WsEndUser";

export interface ArubacloudSvcClient extends SoapClient {
    WsEndUser: WsEndUser;
    GetLoadBalancerLoadsAsync(getLoadBalancerLoads: GetLoadBalancerLoads, options?: ISoapExOptions): Promise<[result: GetLoadBalancerLoadsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancerRuleStatisticsAsync(getLoadBalancerRuleStatistics: GetLoadBalancerRuleStatistics, options?: ISoapExOptions): Promise<[result: GetLoadBalancerRuleStatisticsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerPowerOffAsync(setEnqueueLoadBalancerPowerOff: SetEnqueueLoadBalancerPowerOff, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerPowerOffResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancerNotificationsAsync(getLoadBalancerNotifications: GetLoadBalancerNotifications, options?: ISoapExOptions): Promise<[result: GetLoadBalancerNotificationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerStartAsync(setEnqueueLoadBalancerStart: SetEnqueueLoadBalancerStart, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerStartResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddLoadBalancerContactsAsync(setAddLoadBalancerContacts: SetAddLoadBalancerContacts, options?: ISoapExOptions): Promise<[result: SetAddLoadBalancerContactsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveLoadBalancerContactsAsync(setRemoveLoadBalancerContacts: SetRemoveLoadBalancerContacts, options?: ISoapExOptions): Promise<[result: SetRemoveLoadBalancerContactsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerAddInstancesAsync(setEnqueueLoadBalancerAddInstances: SetEnqueueLoadBalancerAddInstances, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerAddInstancesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerRemoveInstancesAsync(setEnqueueLoadBalancerRemoveInstances: SetEnqueueLoadBalancerRemoveInstances, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerRemoveInstancesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetModifyLoadBalancerAsync(setModifyLoadBalancer: SetModifyLoadBalancer, options?: ISoapExOptions): Promise<[result: SetModifyLoadBalancerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddLoadBalancerRuleAsync(setAddLoadBalancerRule: SetAddLoadBalancerRule, options?: ISoapExOptions): Promise<[result: SetAddLoadBalancerRuleResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveLoadBalancerRuleAsync(setRemoveLoadBalancerRule: SetRemoveLoadBalancerRule, options?: ISoapExOptions): Promise<[result: SetRemoveLoadBalancerRuleResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueReinitializeLoadBalancerAsync(setEnqueueReinitializeLoadBalancer: SetEnqueueReinitializeLoadBalancer, options?: ISoapExOptions): Promise<[result: SetEnqueueReinitializeLoadBalancerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPreConfiguredPackagesAsync(getPreConfiguredPackages: GetPreConfiguredPackages, options?: ISoapExOptions): Promise<[result: GetPreConfiguredPackagesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAdditionalIPServicesAsync(getAdditionalIpServices: GetAdditionalIpServices, options?: ISoapExOptions): Promise<[result: GetAdditionalIpServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueReinitializeServerAsync(setEnqueueReinitializeServer: SetEnqueueReinitializeServer, options?: ISoapExOptions): Promise<[result: SetEnqueueReinitializeServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAllCloudIpAddressesAsync(getAllCloudIpAddresses: GetAllCloudIpAddresses, options?: ISoapExOptions): Promise<[result: GetAllCloudIpAddressesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueSetReverseDnsAsync(setEnqueueSetReverseDns: SetEnqueueSetReverseDns, options?: ISoapExOptions): Promise<[result: SetEnqueueSetReverseDnsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueResetReverseDnsAsync(setEnqueueResetReverseDns: SetEnqueueResetReverseDns, options?: ISoapExOptions): Promise<[result: SetEnqueueResetReverseDnsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetReverseDnsAsync(getReverseDns: GetReverseDns, options?: ISoapExOptions): Promise<[result: GetReverseDnsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    IsLuckySmartAvailableAsync(isLuckySmartAvailable: IsLuckySmartAvailable, options?: ISoapExOptions): Promise<[result: IsLuckySmartAvailableResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLastSoldOutSettingItemListAsync(getLastSoldOutSettingItemList: GetLastSoldOutSettingItemList, options?: ISoapExOptions): Promise<[result: GetLastSoldOutSettingItemListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHybridLinksAsync(getHybridLinks: GetHybridLinks, options?: ISoapExOptions): Promise<[result: GetHybridLinksResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHybridLinksPricingTypesAsync(getHybridLinksPricingTypes: GetHybridLinksPricingTypes, options?: ISoapExOptions): Promise<[result: GetHybridLinksPricingTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueCreateHybridLinkAsync(setEnqueueCreateHybridLink: SetEnqueueCreateHybridLink, options?: ISoapExOptions): Promise<[result: SetEnqueueCreateHybridLinkResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueDeleteHybridLinkAsync(setEnqueueDeleteHybridLink: SetEnqueueDeleteHybridLink, options?: ISoapExOptions): Promise<[result: SetEnqueueDeleteHybridLinkResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudsBaseAsync(getPurchasedPrivateCloudsBase: GetPurchasedPrivateCloudsBase, options?: ISoapExOptions): Promise<[result: GetPurchasedPrivateCloudsBaseResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCountriesAsync(getCountries: GetCountries, options?: ISoapExOptions): Promise<[result: GetCountriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSharedStoragePricingTypesAsync(getSharedStoragePricingTypes: GetSharedStoragePricingTypes, options?: ISoapExOptions): Promise<[result: GetSharedStoragePricingTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSharedStorageDetailsAsync(getSharedStorageDetails: GetSharedStorageDetails, options?: ISoapExOptions): Promise<[result: GetSharedStorageDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    RenameHybridLinkAsync(renameHybridLink: RenameHybridLink, options?: ISoapExOptions): Promise<[result: RenameHybridLinkResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    PlannedChangePrivateCloudWindowsLicenseDeletionAsync(plannedChangePrivateCloudWindowsLicenseDeletion: PlannedChangePrivateCloudWindowsLicenseDeletion, options?: ISoapExOptions): Promise<[result: PlannedChangePrivateCloudWindowsLicenseDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    PlannedChangePrivateCloudLicenseDeletionAsync(plannedChangePrivateCloudLicenseDeletion: PlannedChangePrivateCloudLicenseDeletion, options?: ISoapExOptions): Promise<[result: PlannedChangePrivateCloudLicenseDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ChangePrivateCloudPasswordAsync(changePrivateCloudPassword: ChangePrivateCloudPassword, options?: ISoapExOptions): Promise<[result: ChangePrivateCloudPasswordResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ChangeZertoPasswordAsync(changeZertoPassword: ChangeZertoPassword, options?: ISoapExOptions): Promise<[result: ChangeZertoPasswordResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualMachinePricingTypesAsync(getVirtualMachinePricingTypes: GetVirtualMachinePricingTypes, options?: ISoapExOptions): Promise<[result: GetVirtualMachinePricingTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifyVirtualMachinePackageAsync(setEnqueueModifyVirtualMachinePackage: SetEnqueueModifyVirtualMachinePackage, options?: ISoapExOptions): Promise<[result: SetEnqueueModifyVirtualMachinePackageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ServerPlannedChangeDeletionAsync(serverPlannedChangeDeletion: ServerPlannedChangeDeletion, options?: ISoapExOptions): Promise<[result: ServerPlannedChangeDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTemplatesPriorityAsync(getHypervisorTemplatesPriority: GetHypervisorTemplatesPriority, options?: ISoapExOptions): Promise<[result: GetHypervisorTemplatesPriorityResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTemplatesAsync(getHypervisorTemplates: GetHypervisorTemplates, options?: ISoapExOptions): Promise<[result: GetHypervisorTemplatesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTemplateDetailsAsync(getHypervisorTemplateDetails: GetHypervisorTemplateDetails, options?: ISoapExOptions): Promise<[result: GetHypervisorTemplateDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudPricingTypesAsync(getPrivateCloudPricingTypes: GetPrivateCloudPricingTypes, options?: ISoapExOptions): Promise<[result: GetPrivateCloudPricingTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudResourcesAsync(getPrivateCloudResources: GetPrivateCloudResources, options?: ISoapExOptions): Promise<[result: GetPrivateCloudResourcesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudCustomProductsAsync(getPrivateCloudCustomProducts: GetPrivateCloudCustomProducts, options?: ISoapExOptions): Promise<[result: GetPrivateCloudCustomProductsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPublicVLanForUserAsync(getPublicVLanForUser: GetPublicVLanForUser, options?: ISoapExOptions): Promise<[result: GetPublicVLanForUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ManageIPAsync(manageIp: ManageIp, options?: ISoapExOptions): Promise<[result: ManageIpResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudNamingBlacklistsAsync(getPrivateCloudNamingBlacklists: GetPrivateCloudNamingBlacklists, options?: ISoapExOptions): Promise<[result: GetPrivateCloudNamingBlacklistsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CancelDeleteVirtualMachineAsync(cancelDeleteVirtualMachine: CancelDeleteVirtualMachine, options?: ISoapExOptions): Promise<[result: CancelDeleteVirtualMachineResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CreateVPCUserAsync(createVpcUser: CreateVpcUser, options?: ISoapExOptions): Promise<[result: CreateVpcUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVPCUsersAsync(getVpcUsers: GetVpcUsers, options?: ISoapExOptions): Promise<[result: GetVpcUsersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    RequestVPCUserOtpTokenAsync(requestVpcUserOtpToken: RequestVpcUserOtpToken, options?: ISoapExOptions): Promise<[result: RequestVpcUserOtpTokenResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetVPCOtpStatusAsync(setVpcOtpStatus: SetVpcOtpStatus, options?: ISoapExOptions): Promise<[result: SetVpcOtpStatusResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ResetVPCUserPasswordAsync(resetVpcUserPassword: ResetVpcUserPassword, options?: ISoapExOptions): Promise<[result: ResetVpcUserPasswordResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    DeleteVPCUserAsync(deleteVpcUser: DeleteVpcUser, options?: ISoapExOptions): Promise<[result: DeleteVpcUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    VerifyVPCUserOtpAsync(verifyVpcUserOtp: VerifyVpcUserOtp, options?: ISoapExOptions): Promise<[result: VerifyVpcUserOtpResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVPCRolesAsync(getVpcRoles: GetVpcRoles, options?: ISoapExOptions): Promise<[result: GetVpcRolesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    UpdateVPCUserAsync(updateVpcUser: UpdateVpcUser, options?: ISoapExOptions): Promise<[result: UpdateVpcUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SyncVPCUserOtpTokenAsync(syncVpcUserOtpToken: SyncVpcUserOtpToken, options?: ISoapExOptions): Promise<[result: SyncVpcUserOtpTokenResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    RemoveOldIpFromVPSAsync(removeOldIpFromVps: RemoveOldIpFromVps, options?: ISoapExOptions): Promise<[result: RemoveOldIpFromVpsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetUserAuthenticationTokenAsync(getUserAuthenticationToken: GetUserAuthenticationToken, options?: ISoapExOptions): Promise<[result: GetUserAuthenticationTokenResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCompanyByUrlAsync(getCompanyByUrl: GetCompanyByUrl, options?: ISoapExOptions): Promise<[result: GetCompanyByUrlResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTypesAsync(getHypervisorTypes: GetHypervisorTypes, options?: ISoapExOptions): Promise<[result: GetHypervisorTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorsAsync(getHypervisors: GetHypervisors, options?: ISoapExOptions): Promise<[result: GetHypervisorsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetApplianceTypesAsync(getApplianceTypes: GetApplianceTypes, options?: ISoapExOptions): Promise<[result: GetApplianceTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAllTagsAsync(getAllTags: GetAllTags, options?: ISoapExOptions): Promise<[result: GetAllTagsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorDetailsAsync(getHypervisorDetails: GetHypervisorDetails, options?: ISoapExOptions): Promise<[result: GetHypervisorDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualDatacenterAsync(getVirtualDatacenter: GetVirtualDatacenter, options?: ISoapExOptions): Promise<[result: GetVirtualDatacenterResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualDatacenterCostAsync(getVirtualDatacenterCost: GetVirtualDatacenterCost, options?: ISoapExOptions): Promise<[result: GetVirtualDatacenterCostResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServersAsync(getServers: GetServers, options?: ISoapExOptions): Promise<[result: GetServersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServersListAsync(getServersList: GetServersList, options?: ISoapExOptions): Promise<[result: GetServersListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPagedServersListAsync(getPagedServersList: GetPagedServersList, options?: ISoapExOptions): Promise<[result: GetPagedServersListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServerDetailsAsync(getServerDetails: GetServerDetails, options?: ISoapExOptions): Promise<[result: GetServerDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCreditAsync(getCredit: GetCredit, options?: ISoapExOptions): Promise<[result: GetCreditResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPriceListAsync(getPriceList: GetPriceList, options?: ISoapExOptions): Promise<[result: GetPriceListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedVLansAsync(getPurchasedVLans: GetPurchasedVLans, options?: ISoapExOptions): Promise<[result: GetPurchasedVLansResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedIpAddressesAsync(getPurchasedIpAddresses: GetPurchasedIpAddresses, options?: ISoapExOptions): Promise<[result: GetPurchasedIpAddressesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetOpenStackFlavorsAsync(getOpenStackFlavors: GetOpenStackFlavors, options?: ISoapExOptions): Promise<[result: GetOpenStackFlavorsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetJobsAsync(getJobs: GetJobs, options?: ISoapExOptions): Promise<[result: GetJobsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLogsAsync(getLogs: GetLogs, options?: ISoapExOptions): Promise<[result: GetLogsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetOperationsLogAsync(getOperationsLog: GetOperationsLog, options?: ISoapExOptions): Promise<[result: GetOperationsLogResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetDatacenterConfigurationsAsync(getDatacenterConfigurations: GetDatacenterConfigurations, options?: ISoapExOptions): Promise<[result: GetDatacenterConfigurationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCustomVirtualDisksAsync(getCustomVirtualDisks: GetCustomVirtualDisks, options?: ISoapExOptions): Promise<[result: GetCustomVirtualDisksResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetIsosAsync(getIsos: GetIsos, options?: ISoapExOptions): Promise<[result: GetIsosResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetUserInfoAsync(getUserInfo: GetUserInfo, options?: ISoapExOptions): Promise<[result: GetUserInfoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedFTPAsync(getPurchasedFtp: GetPurchasedFtp, options?: ISoapExOptions): Promise<[result: GetPurchasedFtpResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetNewsAsync(getNews: GetNews, options?: ISoapExOptions): Promise<[result: GetNewsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetScheduledOperationsAsync(getScheduledOperations: GetScheduledOperations, options?: ISoapExOptions): Promise<[result: GetScheduledOperationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServerSchedulesLogsAsync(getServerSchedulesLogs: GetServerSchedulesLogs, options?: ISoapExOptions): Promise<[result: GetServerSchedulesLogsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSchedulerDataTypesAsync(getSchedulerDataTypes: GetSchedulerDataTypes, options?: ISoapExOptions): Promise<[result: GetSchedulerDataTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetTemplateDetailsAsync(getTemplateDetails: GetTemplateDetails, options?: ISoapExOptions): Promise<[result: GetTemplateDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetTemplateCategoriesAsync(getTemplateCategories: GetTemplateCategories, options?: ISoapExOptions): Promise<[result: GetTemplateCategoriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetTemplateLicensesAsync(getTemplateLicenses: GetTemplateLicenses, options?: ISoapExOptions): Promise<[result: GetTemplateLicensesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAvailablePersonalTemplatesAsync(getAvailablePersonalTemplates: GetAvailablePersonalTemplates, options?: ISoapExOptions): Promise<[result: GetAvailablePersonalTemplatesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSystemStatusHistoryAsync(getSystemStatusHistory: GetSystemStatusHistory, options?: ISoapExOptions): Promise<[result: GetSystemStatusHistoryResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSharedStoragesAsync(getSharedStorages: GetSharedStorages, options?: ISoapExOptions): Promise<[result: GetSharedStoragesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAdditionalServicesAsync(getAdditionalServices: GetAdditionalServices, options?: ISoapExOptions): Promise<[result: GetAdditionalServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedAdditionalServicesAsync(getPurchasedAdditionalServices: GetPurchasedAdditionalServices, options?: ISoapExOptions): Promise<[result: GetPurchasedAdditionalServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetRemoteAccessUrlAsync(getRemoteAccessUrl: GetRemoteAccessUrl, options?: ISoapExOptions): Promise<[result: GetRemoteAccessUrlResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetRemoteAccessUrlExAsync(getRemoteAccessUrlEx: GetRemoteAccessUrlEx, options?: ISoapExOptions): Promise<[result: GetRemoteAccessUrlExResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetRemoteAccessUrlAsyncResponseAsync(getRemoteAccessUrlAsyncResponse: GetRemoteAccessUrlAsyncResponse, options?: ISoapExOptions): Promise<[result: GetRemoteAccessUrlAsyncResponseResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVMPerformanceAsync(getVmPerformance: GetVmPerformance, options?: ISoapExOptions): Promise<[result: GetVmPerformanceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVMPerformancesAsync(getVmPerformances: GetVmPerformances, options?: ISoapExOptions): Promise<[result: GetVmPerformancesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVMMetricsAsync(getVmMetrics: GetVmMetrics, options?: ISoapExOptions): Promise<[result: GetVmMetricsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualMachineCostAsync(getVirtualMachineCost: GetVirtualMachineCost, options?: ISoapExOptions): Promise<[result: GetVirtualMachineCostResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualMachineResourcesProductsAsync(getVirtualMachineResourcesProducts: GetVirtualMachineResourcesProducts, options?: ISoapExOptions): Promise<[result: GetVirtualMachineResourcesProductsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CheckEnqueueServerCreationAsync(checkEnqueueServerCreation: CheckEnqueueServerCreation, options?: ISoapExOptions): Promise<[result: CheckEnqueueServerCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerCreationAsync(setEnqueueServerCreation: SetEnqueueServerCreation, options?: ISoapExOptions): Promise<[result: SetEnqueueServerCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerCreationExAsync(setEnqueueServerCreationEx: SetEnqueueServerCreationEx, options?: ISoapExOptions): Promise<[result: SetEnqueueServerCreationExResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerUpdateAsync(setEnqueueServerUpdate: SetEnqueueServerUpdate, options?: ISoapExOptions): Promise<[result: SetEnqueueServerUpdateResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerStartAsync(setEnqueueServerStart: SetEnqueueServerStart, options?: ISoapExOptions): Promise<[result: SetEnqueueServerStartResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerStopAsync(setEnqueueServerStop: SetEnqueueServerStop, options?: ISoapExOptions): Promise<[result: SetEnqueueServerStopResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerDeletionAsync(setEnqueueServerDeletion: SetEnqueueServerDeletion, options?: ISoapExOptions): Promise<[result: SetEnqueueServerDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerResetAsync(setEnqueueServerReset: SetEnqueueServerReset, options?: ISoapExOptions): Promise<[result: SetEnqueueServerResetResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerRestartAsync(setEnqueueServerRestart: SetEnqueueServerRestart, options?: ISoapExOptions): Promise<[result: SetEnqueueServerRestartResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerPowerOffAsync(setEnqueueServerPowerOff: SetEnqueueServerPowerOff, options?: ISoapExOptions): Promise<[result: SetEnqueueServerPowerOffResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerArchiviationAsync(setEnqueueServerArchiviation: SetEnqueueServerArchiviation, options?: ISoapExOptions): Promise<[result: SetEnqueueServerArchiviationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerRestoreAsync(setEnqueueServerRestore: SetEnqueueServerRestore, options?: ISoapExOptions): Promise<[result: SetEnqueueServerRestoreResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRenameServerAsync(setRenameServer: SetRenameServer, options?: ISoapExOptions): Promise<[result: SetRenameServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueMountDvdIsoAsync(setEnqueueMountDvdIso: SetEnqueueMountDvdIso, options?: ISoapExOptions): Promise<[result: SetEnqueueMountDvdIsoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueUnmountDvdIsoAsync(setEnqueueUnmountDvdIso: SetEnqueueUnmountDvdIso, options?: ISoapExOptions): Promise<[result: SetEnqueueUnmountDvdIsoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueVirtualDiskExportAsync(setEnqueueVirtualDiskExport: SetEnqueueVirtualDiskExport, options?: ISoapExOptions): Promise<[result: SetEnqueueVirtualDiskExportResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueVirtualDiskManageAsync(setEnqueueVirtualDiskManage: SetEnqueueVirtualDiskManage, options?: ISoapExOptions): Promise<[result: SetEnqueueVirtualDiskManageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerSnapshotAsync(setEnqueueServerSnapshot: SetEnqueueServerSnapshot, options?: ISoapExOptions): Promise<[result: SetEnqueueServerSnapshotResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePersonalTemplateCreationAsync(setEnqueuePersonalTemplateCreation: SetEnqueuePersonalTemplateCreation, options?: ISoapExOptions): Promise<[result: SetEnqueuePersonalTemplateCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetChangeNoteServerAsync(setChangeNoteServer: SetChangeNoteServer, options?: ISoapExOptions): Promise<[result: SetChangeNoteServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetPurchaseIpAddressAsync(setPurchaseIpAddress: SetPurchaseIpAddress, options?: ISoapExOptions): Promise<[result: SetPurchaseIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveIpAddressAsync(setRemoveIpAddress: SetRemoveIpAddress, options?: ISoapExOptions): Promise<[result: SetRemoveIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueAssociateIpAddressAsync(setEnqueueAssociateIpAddress: SetEnqueueAssociateIpAddress, options?: ISoapExOptions): Promise<[result: SetEnqueueAssociateIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueDeassociateIpAddressAsync(setEnqueueDeassociateIpAddress: SetEnqueueDeassociateIpAddress, options?: ISoapExOptions): Promise<[result: SetEnqueueDeassociateIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetPurchaseVLanAsync(setPurchaseVLan: SetPurchaseVLan, options?: ISoapExOptions): Promise<[result: SetPurchaseVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveVLanAsync(setRemoveVLan: SetRemoveVLan, options?: ISoapExOptions): Promise<[result: SetRemoveVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRenameVLanAsync(setRenameVLan: SetRenameVLan, options?: ISoapExOptions): Promise<[result: SetRenameVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueAssociateVLanAsync(setEnqueueAssociateVLan: SetEnqueueAssociateVLan, options?: ISoapExOptions): Promise<[result: SetEnqueueAssociateVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueDeassociateVLanAsync(setEnqueueDeassociateVLan: SetEnqueueDeassociateVLan, options?: ISoapExOptions): Promise<[result: SetEnqueueDeassociateVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueCreateFTPAccountAsync(setEnqueueCreateFtpAccount: SetEnqueueCreateFtpAccount, options?: ISoapExOptions): Promise<[result: SetEnqueueCreateFtpAccountResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueResizeFTPAccountAsync(setEnqueueResizeFtpAccount: SetEnqueueResizeFtpAccount, options?: ISoapExOptions): Promise<[result: SetEnqueueResizeFtpAccountResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetReadNewsAsync(setReadNews: SetReadNews, options?: ISoapExOptions): Promise<[result: SetReadNewsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddServerScheduledOperationAsync(setAddServerScheduledOperation: SetAddServerScheduledOperation, options?: ISoapExOptions): Promise<[result: SetAddServerScheduledOperationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdateServerScheduledOperationAsync(setUpdateServerScheduledOperation: SetUpdateServerScheduledOperation, options?: ISoapExOptions): Promise<[result: SetUpdateServerScheduledOperationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveServerScheduledOperationAsync(setRemoveServerScheduledOperation: SetRemoveServerScheduledOperation, options?: ISoapExOptions): Promise<[result: SetRemoveServerScheduledOperationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePurchaseSharedStorageAsync(setEnqueuePurchaseSharedStorage: SetEnqueuePurchaseSharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueuePurchaseSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueRemoveSharedStorageAsync(setEnqueueRemoveSharedStorage: SetEnqueueRemoveSharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueueRemoveSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifySharedStorageAsync(setEnqueueModifySharedStorage: SetEnqueueModifySharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueueModifySharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueAddIQNSharedStorageAsync(setEnqueueAddIqnSharedStorage: SetEnqueueAddIqnSharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueueAddIqnSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueRemoveIQNSharedStorageAsync(setEnqueueRemoveIqnSharedStorage: SetEnqueueRemoveIqnSharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueueRemoveIqnSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRenameSharedStorageAsync(setRenameSharedStorage: SetRenameSharedStorage, options?: ISoapExOptions): Promise<[result: SetRenameSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdatePersonalTemplateAsync(setUpdatePersonalTemplate: SetUpdatePersonalTemplate, options?: ISoapExOptions): Promise<[result: SetUpdatePersonalTemplateResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemovePersonalTemplateAsync(setRemovePersonalTemplate: SetRemovePersonalTemplate, options?: ISoapExOptions): Promise<[result: SetRemovePersonalTemplateResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetPurchasedAdditionalServicesAsync(setPurchasedAdditionalServices: SetPurchasedAdditionalServices, options?: ISoapExOptions): Promise<[result: SetPurchasedAdditionalServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetControlToolActiveAsync(setControlToolActive: SetControlToolActive, options?: ISoapExOptions): Promise<[result: SetControlToolActiveResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetControlToolDisableAsync(setControlToolDisable: SetControlToolDisable, options?: ISoapExOptions): Promise<[result: SetControlToolDisableResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetControlToolCheckAsync(getControlToolCheck: GetControlToolCheck, options?: ISoapExOptions): Promise<[result: GetControlToolCheckResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetControlToolActivationRequestsAsync(getControlToolActivationRequests: GetControlToolActivationRequests, options?: ISoapExOptions): Promise<[result: GetControlToolActivationRequestsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetControlToolActivationRequestAsync(setControlToolActivationRequest: SetControlToolActivationRequest, options?: ISoapExOptions): Promise<[result: SetControlToolActivationRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetNetworkAdapterConfigurationAsync(getNetworkAdapterConfiguration: GetNetworkAdapterConfiguration, options?: ISoapExOptions): Promise<[result: GetNetworkAdapterConfigurationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetControlToolCommandResultAsync(getControlToolCommandResult: GetControlToolCommandResult, options?: ISoapExOptions): Promise<[result: GetControlToolCommandResultResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueUpdateControlToolAsync(setEnqueueUpdateControlTool: SetEnqueueUpdateControlTool, options?: ISoapExOptions): Promise<[result: SetEnqueueUpdateControlToolResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetScheduleOccurrencesAsync(getScheduleOccurrences: GetScheduleOccurrences, options?: ISoapExOptions): Promise<[result: GetScheduleOccurrencesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVDCGraphAsync(getVdcGraph: GetVdcGraph, options?: ISoapExOptions): Promise<[result: GetVdcGraphResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddVDCGraphAsync(setAddVdcGraph: SetAddVdcGraph, options?: ISoapExOptions): Promise<[result: SetAddVdcGraphResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdateVDCGraphAsync(setUpdateVdcGraph: SetUpdateVdcGraph, options?: ISoapExOptions): Promise<[result: SetUpdateVdcGraphResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAssistanceLanguagesAsync(getAssistanceLanguages: GetAssistanceLanguages, options?: ISoapExOptions): Promise<[result: GetAssistanceLanguagesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAssistanceLanguagesListAsync(getAssistanceLanguagesList: GetAssistanceLanguagesList, options?: ISoapExOptions): Promise<[result: GetAssistanceLanguagesListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdateAssistanceRequestAsync(setUpdateAssistanceRequest: SetUpdateAssistanceRequest, options?: ISoapExOptions): Promise<[result: SetUpdateAssistanceRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAssistanceRequestDetailsAsync(getAssistanceRequestDetails: GetAssistanceRequestDetails, options?: ISoapExOptions): Promise<[result: GetAssistanceRequestDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAssistanceQuotationAcceptanceAsync(setAssistanceQuotationAcceptance: SetAssistanceQuotationAcceptance, options?: ISoapExOptions): Promise<[result: SetAssistanceQuotationAcceptanceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetSendAssistanceRequestAsync(setSendAssistanceRequest: SetSendAssistanceRequest, options?: ISoapExOptions): Promise<[result: SetSendAssistanceRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetInsertAssistanceRequestAsync(setInsertAssistanceRequest: SetInsertAssistanceRequest, options?: ISoapExOptions): Promise<[result: SetInsertAssistanceRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetUserAssistanceRequestsAsync(getUserAssistanceRequests: GetUserAssistanceRequests, options?: ISoapExOptions): Promise<[result: GetUserAssistanceRequestsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePurchasePrivateCloudAsync(setEnqueuePurchasePrivateCloud: SetEnqueuePurchasePrivateCloud, options?: ISoapExOptions): Promise<[result: SetEnqueuePurchasePrivateCloudResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudResourcesTypesAsync(getPrivateCloudResourcesTypes: GetPrivateCloudResourcesTypes, options?: ISoapExOptions): Promise<[result: GetPrivateCloudResourcesTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudResourcesTypes2Async(getPrivateCloudResourcesTypes2: GetPrivateCloudResourcesTypes2, options?: ISoapExOptions): Promise<[result: GetPrivateCloudResourcesTypes2Response, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudsAsync(getPurchasedPrivateClouds: GetPurchasedPrivateClouds, options?: ISoapExOptions): Promise<[result: GetPurchasedPrivateCloudsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudDetailsAsync(getPurchasedPrivateCloudDetails: GetPurchasedPrivateCloudDetails, options?: ISoapExOptions): Promise<[result: GetPurchasedPrivateCloudDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudDetails2Async(getPurchasedPrivateCloudDetails2: GetPurchasedPrivateCloudDetails2, options?: ISoapExOptions): Promise<[result: GetPurchasedPrivateCloudDetails2Response, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifyPrivateCloudResourcesAsync(setEnqueueModifyPrivateCloudResources: SetEnqueueModifyPrivateCloudResources, options?: ISoapExOptions): Promise<[result: SetEnqueueModifyPrivateCloudResourcesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePrivateCloudDeletionAsync(setEnqueuePrivateCloudDeletion: SetEnqueuePrivateCloudDeletion, options?: ISoapExOptions): Promise<[result: SetEnqueuePrivateCloudDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CancelDeletePrivateCloudInstanceAsync(cancelDeletePrivateCloudInstance: CancelDeletePrivateCloudInstance, options?: ISoapExOptions): Promise<[result: CancelDeletePrivateCloudInstanceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePrivateCloudActivationAsync(setEnqueuePrivateCloudActivation: SetEnqueuePrivateCloudActivation, options?: ISoapExOptions): Promise<[result: SetEnqueuePrivateCloudActivationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudOrganizationsAsync(getPrivateCloudOrganizations: GetPrivateCloudOrganizations, options?: ISoapExOptions): Promise<[result: GetPrivateCloudOrganizationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudOrganizationDetailsAsync(getPrivateCloudOrganizationDetails: GetPrivateCloudOrganizationDetails, options?: ISoapExOptions): Promise<[result: GetPrivateCloudOrganizationDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHybridLinksbyOrgAsync(getHybridLinksbyOrg: GetHybridLinksbyOrg, options?: ISoapExOptions): Promise<[result: GetHybridLinksbyOrgResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetActivatedPrivateCloudFeaturesAsync(getActivatedPrivateCloudFeatures: GetActivatedPrivateCloudFeatures, options?: ISoapExOptions): Promise<[result: GetActivatedPrivateCloudFeaturesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifyPrivateCloudOrganizationAsync(setEnqueueModifyPrivateCloudOrganization: SetEnqueueModifyPrivateCloudOrganization, options?: ISoapExOptions): Promise<[result: SetEnqueueModifyPrivateCloudOrganizationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerCreationAsync(setEnqueueLoadBalancerCreation: SetEnqueueLoadBalancerCreation, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerDeletionAsync(setEnqueueLoadBalancerDeletion: SetEnqueueLoadBalancerDeletion, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancersAsync(getLoadBalancers: GetLoadBalancers, options?: ISoapExOptions): Promise<[result: GetLoadBalancersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancerLoadsAsync(getLoadBalancerLoads: GetLoadBalancerLoads, options?: ISoapExOptions): Promise<[result: GetLoadBalancerLoadsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancerRuleStatisticsAsync(getLoadBalancerRuleStatistics: GetLoadBalancerRuleStatistics, options?: ISoapExOptions): Promise<[result: GetLoadBalancerRuleStatisticsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerPowerOffAsync(setEnqueueLoadBalancerPowerOff: SetEnqueueLoadBalancerPowerOff, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerPowerOffResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancerNotificationsAsync(getLoadBalancerNotifications: GetLoadBalancerNotifications, options?: ISoapExOptions): Promise<[result: GetLoadBalancerNotificationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerStartAsync(setEnqueueLoadBalancerStart: SetEnqueueLoadBalancerStart, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerStartResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddLoadBalancerContactsAsync(setAddLoadBalancerContacts: SetAddLoadBalancerContacts, options?: ISoapExOptions): Promise<[result: SetAddLoadBalancerContactsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveLoadBalancerContactsAsync(setRemoveLoadBalancerContacts: SetRemoveLoadBalancerContacts, options?: ISoapExOptions): Promise<[result: SetRemoveLoadBalancerContactsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerAddInstancesAsync(setEnqueueLoadBalancerAddInstances: SetEnqueueLoadBalancerAddInstances, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerAddInstancesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerRemoveInstancesAsync(setEnqueueLoadBalancerRemoveInstances: SetEnqueueLoadBalancerRemoveInstances, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerRemoveInstancesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetModifyLoadBalancerAsync(setModifyLoadBalancer: SetModifyLoadBalancer, options?: ISoapExOptions): Promise<[result: SetModifyLoadBalancerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddLoadBalancerRuleAsync(setAddLoadBalancerRule: SetAddLoadBalancerRule, options?: ISoapExOptions): Promise<[result: SetAddLoadBalancerRuleResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveLoadBalancerRuleAsync(setRemoveLoadBalancerRule: SetRemoveLoadBalancerRule, options?: ISoapExOptions): Promise<[result: SetRemoveLoadBalancerRuleResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueReinitializeLoadBalancerAsync(setEnqueueReinitializeLoadBalancer: SetEnqueueReinitializeLoadBalancer, options?: ISoapExOptions): Promise<[result: SetEnqueueReinitializeLoadBalancerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPreConfiguredPackagesAsync(getPreConfiguredPackages: GetPreConfiguredPackages, options?: ISoapExOptions): Promise<[result: GetPreConfiguredPackagesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAdditionalIPServicesAsync(getAdditionalIpServices: GetAdditionalIpServices1, options?: ISoapExOptions): Promise<[result: GetAdditionalIpServicesResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueReinitializeServerAsync(setEnqueueReinitializeServer: SetEnqueueReinitializeServer, options?: ISoapExOptions): Promise<[result: SetEnqueueReinitializeServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAllCloudIpAddressesAsync(getAllCloudIpAddresses: GetAllCloudIpAddresses, options?: ISoapExOptions): Promise<[result: GetAllCloudIpAddressesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueSetReverseDnsAsync(setEnqueueSetReverseDns: SetEnqueueSetReverseDns, options?: ISoapExOptions): Promise<[result: SetEnqueueSetReverseDnsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueResetReverseDnsAsync(setEnqueueResetReverseDns: SetEnqueueResetReverseDns, options?: ISoapExOptions): Promise<[result: SetEnqueueResetReverseDnsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetReverseDnsAsync(getReverseDns: GetReverseDns, options?: ISoapExOptions): Promise<[result: GetReverseDnsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    IsLuckySmartAvailableAsync(isLuckySmartAvailable: IsLuckySmartAvailable, options?: ISoapExOptions): Promise<[result: IsLuckySmartAvailableResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLastSoldOutSettingItemListAsync(getLastSoldOutSettingItemList: GetLastSoldOutSettingItemList, options?: ISoapExOptions): Promise<[result: GetLastSoldOutSettingItemListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHybridLinksAsync(getHybridLinks: GetHybridLinks, options?: ISoapExOptions): Promise<[result: GetHybridLinksResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHybridLinksPricingTypesAsync(getHybridLinksPricingTypes: GetHybridLinksPricingTypes, options?: ISoapExOptions): Promise<[result: GetHybridLinksPricingTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueCreateHybridLinkAsync(setEnqueueCreateHybridLink: SetEnqueueCreateHybridLink, options?: ISoapExOptions): Promise<[result: SetEnqueueCreateHybridLinkResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueDeleteHybridLinkAsync(setEnqueueDeleteHybridLink: SetEnqueueDeleteHybridLink, options?: ISoapExOptions): Promise<[result: SetEnqueueDeleteHybridLinkResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudsBaseAsync(getPurchasedPrivateCloudsBase: GetPurchasedPrivateCloudsBase, options?: ISoapExOptions): Promise<[result: GetPurchasedPrivateCloudsBaseResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCountriesAsync(getCountries: GetCountries, options?: ISoapExOptions): Promise<[result: GetCountriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSharedStoragePricingTypesAsync(getSharedStoragePricingTypes: GetSharedStoragePricingTypes, options?: ISoapExOptions): Promise<[result: GetSharedStoragePricingTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSharedStorageDetailsAsync(getSharedStorageDetails: GetSharedStorageDetails, options?: ISoapExOptions): Promise<[result: GetSharedStorageDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    RenameHybridLinkAsync(renameHybridLink: RenameHybridLink, options?: ISoapExOptions): Promise<[result: RenameHybridLinkResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    PlannedChangePrivateCloudWindowsLicenseDeletionAsync(plannedChangePrivateCloudWindowsLicenseDeletion: PlannedChangePrivateCloudWindowsLicenseDeletion, options?: ISoapExOptions): Promise<[result: PlannedChangePrivateCloudWindowsLicenseDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    PlannedChangePrivateCloudLicenseDeletionAsync(plannedChangePrivateCloudLicenseDeletion: PlannedChangePrivateCloudLicenseDeletion, options?: ISoapExOptions): Promise<[result: PlannedChangePrivateCloudLicenseDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ChangePrivateCloudPasswordAsync(changePrivateCloudPassword: ChangePrivateCloudPassword, options?: ISoapExOptions): Promise<[result: ChangePrivateCloudPasswordResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ChangeZertoPasswordAsync(changeZertoPassword: ChangeZertoPassword, options?: ISoapExOptions): Promise<[result: ChangeZertoPasswordResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualMachinePricingTypesAsync(getVirtualMachinePricingTypes: GetVirtualMachinePricingTypes, options?: ISoapExOptions): Promise<[result: GetVirtualMachinePricingTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifyVirtualMachinePackageAsync(setEnqueueModifyVirtualMachinePackage: SetEnqueueModifyVirtualMachinePackage, options?: ISoapExOptions): Promise<[result: SetEnqueueModifyVirtualMachinePackageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ServerPlannedChangeDeletionAsync(serverPlannedChangeDeletion: ServerPlannedChangeDeletion, options?: ISoapExOptions): Promise<[result: ServerPlannedChangeDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTemplatesPriorityAsync(getHypervisorTemplatesPriority: GetHypervisorTemplatesPriority, options?: ISoapExOptions): Promise<[result: GetHypervisorTemplatesPriorityResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTemplatesAsync(getHypervisorTemplates: GetHypervisorTemplates, options?: ISoapExOptions): Promise<[result: GetHypervisorTemplatesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTemplateDetailsAsync(getHypervisorTemplateDetails: GetHypervisorTemplateDetails, options?: ISoapExOptions): Promise<[result: GetHypervisorTemplateDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudPricingTypesAsync(getPrivateCloudPricingTypes: GetPrivateCloudPricingTypes, options?: ISoapExOptions): Promise<[result: GetPrivateCloudPricingTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudResourcesAsync(getPrivateCloudResources: GetPrivateCloudResources, options?: ISoapExOptions): Promise<[result: GetPrivateCloudResourcesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudCustomProductsAsync(getPrivateCloudCustomProducts: GetPrivateCloudCustomProducts, options?: ISoapExOptions): Promise<[result: GetPrivateCloudCustomProductsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPublicVLanForUserAsync(getPublicVLanForUser: GetPublicVLanForUser, options?: ISoapExOptions): Promise<[result: GetPublicVLanForUserResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ManageIPAsync(manageIp: ManageIp1, options?: ISoapExOptions): Promise<[result: ManageIpResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudNamingBlacklistsAsync(getPrivateCloudNamingBlacklists: GetPrivateCloudNamingBlacklists, options?: ISoapExOptions): Promise<[result: GetPrivateCloudNamingBlacklistsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CancelDeleteVirtualMachineAsync(cancelDeleteVirtualMachine: CancelDeleteVirtualMachine, options?: ISoapExOptions): Promise<[result: CancelDeleteVirtualMachineResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CreateVPCUserAsync(createVpcUser: CreateVpcUser1, options?: ISoapExOptions): Promise<[result: CreateVpcUserResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVPCUsersAsync(getVpcUsers: GetVpcUsers1, options?: ISoapExOptions): Promise<[result: GetVpcUsersResponse2, rawResponse: any, soapHeader: any, rawRequest: any]>;
    RequestVPCUserOtpTokenAsync(requestVpcUserOtpToken: RequestVpcUserOtpToken1, options?: ISoapExOptions): Promise<[result: RequestVpcUserOtpTokenResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetVPCOtpStatusAsync(setVpcOtpStatus: SetVpcOtpStatus1, options?: ISoapExOptions): Promise<[result: SetVpcOtpStatusResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    ResetVPCUserPasswordAsync(resetVpcUserPassword: ResetVpcUserPassword1, options?: ISoapExOptions): Promise<[result: ResetVpcUserPasswordResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    DeleteVPCUserAsync(deleteVpcUser: DeleteVpcUser1, options?: ISoapExOptions): Promise<[result: DeleteVpcUserResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    VerifyVPCUserOtpAsync(verifyVpcUserOtp: VerifyVpcUserOtp1, options?: ISoapExOptions): Promise<[result: VerifyVpcUserOtpResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVPCRolesAsync(getVpcRoles: GetVpcRoles1, options?: ISoapExOptions): Promise<[result: GetVpcRolesResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    UpdateVPCUserAsync(updateVpcUser: UpdateVpcUser1, options?: ISoapExOptions): Promise<[result: UpdateVpcUserResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SyncVPCUserOtpTokenAsync(syncVpcUserOtpToken: SyncVpcUserOtpToken1, options?: ISoapExOptions): Promise<[result: SyncVpcUserOtpTokenResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    RemoveOldIpFromVPSAsync(removeOldIpFromVps: RemoveOldIpFromVps1, options?: ISoapExOptions): Promise<[result: RemoveOldIpFromVpsResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetUserAuthenticationTokenAsync(getUserAuthenticationToken: GetUserAuthenticationToken, options?: ISoapExOptions): Promise<[result: GetUserAuthenticationTokenResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCompanyByUrlAsync(getCompanyByUrl: GetCompanyByUrl, options?: ISoapExOptions): Promise<[result: GetCompanyByUrlResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorTypesAsync(getHypervisorTypes: GetHypervisorTypes, options?: ISoapExOptions): Promise<[result: GetHypervisorTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorsAsync(getHypervisors: GetHypervisors, options?: ISoapExOptions): Promise<[result: GetHypervisorsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetApplianceTypesAsync(getApplianceTypes: GetApplianceTypes, options?: ISoapExOptions): Promise<[result: GetApplianceTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAllTagsAsync(getAllTags: GetAllTags, options?: ISoapExOptions): Promise<[result: GetAllTagsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHypervisorDetailsAsync(getHypervisorDetails: GetHypervisorDetails, options?: ISoapExOptions): Promise<[result: GetHypervisorDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualDatacenterAsync(getVirtualDatacenter: GetVirtualDatacenter, options?: ISoapExOptions): Promise<[result: GetVirtualDatacenterResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualDatacenterCostAsync(getVirtualDatacenterCost: GetVirtualDatacenterCost, options?: ISoapExOptions): Promise<[result: GetVirtualDatacenterCostResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServersAsync(getServers: GetServers, options?: ISoapExOptions): Promise<[result: GetServersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServersListAsync(getServersList: GetServersList, options?: ISoapExOptions): Promise<[result: GetServersListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPagedServersListAsync(getPagedServersList: GetPagedServersList, options?: ISoapExOptions): Promise<[result: GetPagedServersListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServerDetailsAsync(getServerDetails: GetServerDetails, options?: ISoapExOptions): Promise<[result: GetServerDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCreditAsync(getCredit: GetCredit, options?: ISoapExOptions): Promise<[result: GetCreditResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPriceListAsync(getPriceList: GetPriceList, options?: ISoapExOptions): Promise<[result: GetPriceListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedVLansAsync(getPurchasedVLans: GetPurchasedVLans, options?: ISoapExOptions): Promise<[result: GetPurchasedVLansResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedIpAddressesAsync(getPurchasedIpAddresses: GetPurchasedIpAddresses, options?: ISoapExOptions): Promise<[result: GetPurchasedIpAddressesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetOpenStackFlavorsAsync(getOpenStackFlavors: GetOpenStackFlavors, options?: ISoapExOptions): Promise<[result: GetOpenStackFlavorsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetJobsAsync(getJobs: GetJobs, options?: ISoapExOptions): Promise<[result: GetJobsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLogsAsync(getLogs: GetLogs, options?: ISoapExOptions): Promise<[result: GetLogsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetOperationsLogAsync(getOperationsLog: GetOperationsLog, options?: ISoapExOptions): Promise<[result: GetOperationsLogResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetDatacenterConfigurationsAsync(getDatacenterConfigurations: GetDatacenterConfigurations, options?: ISoapExOptions): Promise<[result: GetDatacenterConfigurationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetCustomVirtualDisksAsync(getCustomVirtualDisks: GetCustomVirtualDisks, options?: ISoapExOptions): Promise<[result: GetCustomVirtualDisksResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetIsosAsync(getIsos: GetIsos, options?: ISoapExOptions): Promise<[result: GetIsosResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetUserInfoAsync(getUserInfo: GetUserInfo, options?: ISoapExOptions): Promise<[result: GetUserInfoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedFTPAsync(getPurchasedFtp: GetPurchasedFtp1, options?: ISoapExOptions): Promise<[result: GetPurchasedFtpResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetNewsAsync(getNews: GetNews, options?: ISoapExOptions): Promise<[result: GetNewsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetScheduledOperationsAsync(getScheduledOperations: GetScheduledOperations, options?: ISoapExOptions): Promise<[result: GetScheduledOperationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetServerSchedulesLogsAsync(getServerSchedulesLogs: GetServerSchedulesLogs, options?: ISoapExOptions): Promise<[result: GetServerSchedulesLogsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSchedulerDataTypesAsync(getSchedulerDataTypes: GetSchedulerDataTypes, options?: ISoapExOptions): Promise<[result: GetSchedulerDataTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetTemplateDetailsAsync(getTemplateDetails: GetTemplateDetails, options?: ISoapExOptions): Promise<[result: GetTemplateDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetTemplateCategoriesAsync(getTemplateCategories: GetTemplateCategories, options?: ISoapExOptions): Promise<[result: GetTemplateCategoriesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetTemplateLicensesAsync(getTemplateLicenses: GetTemplateLicenses, options?: ISoapExOptions): Promise<[result: GetTemplateLicensesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAvailablePersonalTemplatesAsync(getAvailablePersonalTemplates: GetAvailablePersonalTemplates, options?: ISoapExOptions): Promise<[result: GetAvailablePersonalTemplatesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSystemStatusHistoryAsync(getSystemStatusHistory: GetSystemStatusHistory, options?: ISoapExOptions): Promise<[result: GetSystemStatusHistoryResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetSharedStoragesAsync(getSharedStorages: GetSharedStorages, options?: ISoapExOptions): Promise<[result: GetSharedStoragesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAdditionalServicesAsync(getAdditionalServices: GetAdditionalServices, options?: ISoapExOptions): Promise<[result: GetAdditionalServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedAdditionalServicesAsync(getPurchasedAdditionalServices: GetPurchasedAdditionalServices, options?: ISoapExOptions): Promise<[result: GetPurchasedAdditionalServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetRemoteAccessUrlAsync(getRemoteAccessUrl: GetRemoteAccessUrl, options?: ISoapExOptions): Promise<[result: GetRemoteAccessUrlResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetRemoteAccessUrlExAsync(getRemoteAccessUrlEx: GetRemoteAccessUrlEx, options?: ISoapExOptions): Promise<[result: GetRemoteAccessUrlExResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetRemoteAccessUrlAsyncResponseAsync(getRemoteAccessUrlAsyncResponse: GetRemoteAccessUrlAsyncResponse, options?: ISoapExOptions): Promise<[result: GetRemoteAccessUrlAsyncResponseResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVMPerformanceAsync(getVmPerformance: GetVmPerformance1, options?: ISoapExOptions): Promise<[result: GetVmPerformanceResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVMPerformancesAsync(getVmPerformances: GetVmPerformances1, options?: ISoapExOptions): Promise<[result: GetVmPerformancesResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVMMetricsAsync(getVmMetrics: GetVmMetrics1, options?: ISoapExOptions): Promise<[result: GetVmMetricsResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualMachineCostAsync(getVirtualMachineCost: GetVirtualMachineCost, options?: ISoapExOptions): Promise<[result: GetVirtualMachineCostResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVirtualMachineResourcesProductsAsync(getVirtualMachineResourcesProducts: GetVirtualMachineResourcesProducts, options?: ISoapExOptions): Promise<[result: GetVirtualMachineResourcesProductsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CheckEnqueueServerCreationAsync(checkEnqueueServerCreation: CheckEnqueueServerCreation, options?: ISoapExOptions): Promise<[result: CheckEnqueueServerCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerCreationAsync(setEnqueueServerCreation: SetEnqueueServerCreation, options?: ISoapExOptions): Promise<[result: SetEnqueueServerCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerCreationExAsync(setEnqueueServerCreationEx: SetEnqueueServerCreationEx, options?: ISoapExOptions): Promise<[result: SetEnqueueServerCreationExResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerUpdateAsync(setEnqueueServerUpdate: SetEnqueueServerUpdate, options?: ISoapExOptions): Promise<[result: SetEnqueueServerUpdateResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerStartAsync(setEnqueueServerStart: SetEnqueueServerStart, options?: ISoapExOptions): Promise<[result: SetEnqueueServerStartResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerStopAsync(setEnqueueServerStop: SetEnqueueServerStop, options?: ISoapExOptions): Promise<[result: SetEnqueueServerStopResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerDeletionAsync(setEnqueueServerDeletion: SetEnqueueServerDeletion, options?: ISoapExOptions): Promise<[result: SetEnqueueServerDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerResetAsync(setEnqueueServerReset: SetEnqueueServerReset, options?: ISoapExOptions): Promise<[result: SetEnqueueServerResetResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerRestartAsync(setEnqueueServerRestart: SetEnqueueServerRestart, options?: ISoapExOptions): Promise<[result: SetEnqueueServerRestartResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerPowerOffAsync(setEnqueueServerPowerOff: SetEnqueueServerPowerOff, options?: ISoapExOptions): Promise<[result: SetEnqueueServerPowerOffResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerArchiviationAsync(setEnqueueServerArchiviation: SetEnqueueServerArchiviation, options?: ISoapExOptions): Promise<[result: SetEnqueueServerArchiviationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerRestoreAsync(setEnqueueServerRestore: SetEnqueueServerRestore, options?: ISoapExOptions): Promise<[result: SetEnqueueServerRestoreResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRenameServerAsync(setRenameServer: SetRenameServer, options?: ISoapExOptions): Promise<[result: SetRenameServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueMountDvdIsoAsync(setEnqueueMountDvdIso: SetEnqueueMountDvdIso, options?: ISoapExOptions): Promise<[result: SetEnqueueMountDvdIsoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueUnmountDvdIsoAsync(setEnqueueUnmountDvdIso: SetEnqueueUnmountDvdIso, options?: ISoapExOptions): Promise<[result: SetEnqueueUnmountDvdIsoResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueVirtualDiskExportAsync(setEnqueueVirtualDiskExport: SetEnqueueVirtualDiskExport, options?: ISoapExOptions): Promise<[result: SetEnqueueVirtualDiskExportResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueVirtualDiskManageAsync(setEnqueueVirtualDiskManage: SetEnqueueVirtualDiskManage, options?: ISoapExOptions): Promise<[result: SetEnqueueVirtualDiskManageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueServerSnapshotAsync(setEnqueueServerSnapshot: SetEnqueueServerSnapshot, options?: ISoapExOptions): Promise<[result: SetEnqueueServerSnapshotResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePersonalTemplateCreationAsync(setEnqueuePersonalTemplateCreation: SetEnqueuePersonalTemplateCreation, options?: ISoapExOptions): Promise<[result: SetEnqueuePersonalTemplateCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetChangeNoteServerAsync(setChangeNoteServer: SetChangeNoteServer, options?: ISoapExOptions): Promise<[result: SetChangeNoteServerResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetPurchaseIpAddressAsync(setPurchaseIpAddress: SetPurchaseIpAddress, options?: ISoapExOptions): Promise<[result: SetPurchaseIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveIpAddressAsync(setRemoveIpAddress: SetRemoveIpAddress, options?: ISoapExOptions): Promise<[result: SetRemoveIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueAssociateIpAddressAsync(setEnqueueAssociateIpAddress: SetEnqueueAssociateIpAddress, options?: ISoapExOptions): Promise<[result: SetEnqueueAssociateIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueDeassociateIpAddressAsync(setEnqueueDeassociateIpAddress: SetEnqueueDeassociateIpAddress, options?: ISoapExOptions): Promise<[result: SetEnqueueDeassociateIpAddressResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetPurchaseVLanAsync(setPurchaseVLan: SetPurchaseVLan, options?: ISoapExOptions): Promise<[result: SetPurchaseVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveVLanAsync(setRemoveVLan: SetRemoveVLan, options?: ISoapExOptions): Promise<[result: SetRemoveVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRenameVLanAsync(setRenameVLan: SetRenameVLan, options?: ISoapExOptions): Promise<[result: SetRenameVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueAssociateVLanAsync(setEnqueueAssociateVLan: SetEnqueueAssociateVLan, options?: ISoapExOptions): Promise<[result: SetEnqueueAssociateVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueDeassociateVLanAsync(setEnqueueDeassociateVLan: SetEnqueueDeassociateVLan, options?: ISoapExOptions): Promise<[result: SetEnqueueDeassociateVLanResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueCreateFTPAccountAsync(setEnqueueCreateFtpAccount: SetEnqueueCreateFtpAccount1, options?: ISoapExOptions): Promise<[result: SetEnqueueCreateFtpAccountResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueResizeFTPAccountAsync(setEnqueueResizeFtpAccount: SetEnqueueResizeFtpAccount1, options?: ISoapExOptions): Promise<[result: SetEnqueueResizeFtpAccountResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetReadNewsAsync(setReadNews: SetReadNews, options?: ISoapExOptions): Promise<[result: SetReadNewsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddServerScheduledOperationAsync(setAddServerScheduledOperation: SetAddServerScheduledOperation, options?: ISoapExOptions): Promise<[result: SetAddServerScheduledOperationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdateServerScheduledOperationAsync(setUpdateServerScheduledOperation: SetUpdateServerScheduledOperation, options?: ISoapExOptions): Promise<[result: SetUpdateServerScheduledOperationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemoveServerScheduledOperationAsync(setRemoveServerScheduledOperation: SetRemoveServerScheduledOperation, options?: ISoapExOptions): Promise<[result: SetRemoveServerScheduledOperationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePurchaseSharedStorageAsync(setEnqueuePurchaseSharedStorage: SetEnqueuePurchaseSharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueuePurchaseSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueRemoveSharedStorageAsync(setEnqueueRemoveSharedStorage: SetEnqueueRemoveSharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueueRemoveSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifySharedStorageAsync(setEnqueueModifySharedStorage: SetEnqueueModifySharedStorage, options?: ISoapExOptions): Promise<[result: SetEnqueueModifySharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueAddIQNSharedStorageAsync(setEnqueueAddIqnSharedStorage: SetEnqueueAddIqnSharedStorage1, options?: ISoapExOptions): Promise<[result: SetEnqueueAddIqnSharedStorageResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueRemoveIQNSharedStorageAsync(setEnqueueRemoveIqnSharedStorage: SetEnqueueRemoveIqnSharedStorage1, options?: ISoapExOptions): Promise<[result: SetEnqueueRemoveIqnSharedStorageResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRenameSharedStorageAsync(setRenameSharedStorage: SetRenameSharedStorage, options?: ISoapExOptions): Promise<[result: SetRenameSharedStorageResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdatePersonalTemplateAsync(setUpdatePersonalTemplate: SetUpdatePersonalTemplate, options?: ISoapExOptions): Promise<[result: SetUpdatePersonalTemplateResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetRemovePersonalTemplateAsync(setRemovePersonalTemplate: SetRemovePersonalTemplate, options?: ISoapExOptions): Promise<[result: SetRemovePersonalTemplateResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetPurchasedAdditionalServicesAsync(setPurchasedAdditionalServices: SetPurchasedAdditionalServices, options?: ISoapExOptions): Promise<[result: SetPurchasedAdditionalServicesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetControlToolActiveAsync(setControlToolActive: SetControlToolActive, options?: ISoapExOptions): Promise<[result: SetControlToolActiveResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetControlToolDisableAsync(setControlToolDisable: SetControlToolDisable, options?: ISoapExOptions): Promise<[result: SetControlToolDisableResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetControlToolCheckAsync(getControlToolCheck: GetControlToolCheck, options?: ISoapExOptions): Promise<[result: GetControlToolCheckResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetControlToolActivationRequestsAsync(getControlToolActivationRequests: GetControlToolActivationRequests, options?: ISoapExOptions): Promise<[result: GetControlToolActivationRequestsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetControlToolActivationRequestAsync(setControlToolActivationRequest: SetControlToolActivationRequest, options?: ISoapExOptions): Promise<[result: SetControlToolActivationRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetNetworkAdapterConfigurationAsync(getNetworkAdapterConfiguration: GetNetworkAdapterConfiguration, options?: ISoapExOptions): Promise<[result: GetNetworkAdapterConfigurationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetControlToolCommandResultAsync(getControlToolCommandResult: GetControlToolCommandResult, options?: ISoapExOptions): Promise<[result: GetControlToolCommandResultResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueUpdateControlToolAsync(setEnqueueUpdateControlTool: SetEnqueueUpdateControlTool, options?: ISoapExOptions): Promise<[result: SetEnqueueUpdateControlToolResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetScheduleOccurrencesAsync(getScheduleOccurrences: GetScheduleOccurrences, options?: ISoapExOptions): Promise<[result: GetScheduleOccurrencesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetVDCGraphAsync(getVdcGraph: GetVdcGraph1, options?: ISoapExOptions): Promise<[result: GetVdcGraphResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAddVDCGraphAsync(setAddVdcGraph: SetAddVdcGraph1, options?: ISoapExOptions): Promise<[result: SetAddVdcGraphResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdateVDCGraphAsync(setUpdateVdcGraph: SetUpdateVdcGraph1, options?: ISoapExOptions): Promise<[result: SetUpdateVdcGraphResponse1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAssistanceLanguagesAsync(getAssistanceLanguages: GetAssistanceLanguages, options?: ISoapExOptions): Promise<[result: GetAssistanceLanguagesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAssistanceLanguagesListAsync(getAssistanceLanguagesList: GetAssistanceLanguagesList, options?: ISoapExOptions): Promise<[result: GetAssistanceLanguagesListResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetUpdateAssistanceRequestAsync(setUpdateAssistanceRequest: SetUpdateAssistanceRequest, options?: ISoapExOptions): Promise<[result: SetUpdateAssistanceRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetAssistanceRequestDetailsAsync(getAssistanceRequestDetails: GetAssistanceRequestDetails, options?: ISoapExOptions): Promise<[result: GetAssistanceRequestDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetAssistanceQuotationAcceptanceAsync(setAssistanceQuotationAcceptance: SetAssistanceQuotationAcceptance, options?: ISoapExOptions): Promise<[result: SetAssistanceQuotationAcceptanceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetSendAssistanceRequestAsync(setSendAssistanceRequest: SetSendAssistanceRequest, options?: ISoapExOptions): Promise<[result: SetSendAssistanceRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetInsertAssistanceRequestAsync(setInsertAssistanceRequest: SetInsertAssistanceRequest, options?: ISoapExOptions): Promise<[result: SetInsertAssistanceRequestResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetUserAssistanceRequestsAsync(getUserAssistanceRequests: GetUserAssistanceRequests, options?: ISoapExOptions): Promise<[result: GetUserAssistanceRequestsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePurchasePrivateCloudAsync(setEnqueuePurchasePrivateCloud: SetEnqueuePurchasePrivateCloud, options?: ISoapExOptions): Promise<[result: SetEnqueuePurchasePrivateCloudResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudResourcesTypesAsync(getPrivateCloudResourcesTypes: GetPrivateCloudResourcesTypes, options?: ISoapExOptions): Promise<[result: GetPrivateCloudResourcesTypesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudResourcesTypes2Async(getPrivateCloudResourcesTypes2: GetPrivateCloudResourcesTypes2, options?: ISoapExOptions): Promise<[result: GetPrivateCloudResourcesTypes2Response, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudsAsync(getPurchasedPrivateClouds: GetPurchasedPrivateClouds, options?: ISoapExOptions): Promise<[result: GetPurchasedPrivateCloudsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudDetailsAsync(getPurchasedPrivateCloudDetails: GetPurchasedPrivateCloudDetails, options?: ISoapExOptions): Promise<[result: GetPurchasedPrivateCloudDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPurchasedPrivateCloudDetails2Async(getPurchasedPrivateCloudDetails2: GetPurchasedPrivateCloudDetails2, options?: ISoapExOptions): Promise<[result: GetPurchasedPrivateCloudDetails2Response, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifyPrivateCloudResourcesAsync(setEnqueueModifyPrivateCloudResources: SetEnqueueModifyPrivateCloudResources, options?: ISoapExOptions): Promise<[result: SetEnqueueModifyPrivateCloudResourcesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePrivateCloudDeletionAsync(setEnqueuePrivateCloudDeletion: SetEnqueuePrivateCloudDeletion, options?: ISoapExOptions): Promise<[result: SetEnqueuePrivateCloudDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    CancelDeletePrivateCloudInstanceAsync(cancelDeletePrivateCloudInstance: CancelDeletePrivateCloudInstance, options?: ISoapExOptions): Promise<[result: CancelDeletePrivateCloudInstanceResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueuePrivateCloudActivationAsync(setEnqueuePrivateCloudActivation: SetEnqueuePrivateCloudActivation, options?: ISoapExOptions): Promise<[result: SetEnqueuePrivateCloudActivationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudOrganizationsAsync(getPrivateCloudOrganizations: GetPrivateCloudOrganizations, options?: ISoapExOptions): Promise<[result: GetPrivateCloudOrganizationsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetPrivateCloudOrganizationDetailsAsync(getPrivateCloudOrganizationDetails: GetPrivateCloudOrganizationDetails, options?: ISoapExOptions): Promise<[result: GetPrivateCloudOrganizationDetailsResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetHybridLinksbyOrgAsync(getHybridLinksbyOrg: GetHybridLinksbyOrg, options?: ISoapExOptions): Promise<[result: GetHybridLinksbyOrgResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetActivatedPrivateCloudFeaturesAsync(getActivatedPrivateCloudFeatures: GetActivatedPrivateCloudFeatures, options?: ISoapExOptions): Promise<[result: GetActivatedPrivateCloudFeaturesResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueModifyPrivateCloudOrganizationAsync(setEnqueueModifyPrivateCloudOrganization: SetEnqueueModifyPrivateCloudOrganization, options?: ISoapExOptions): Promise<[result: SetEnqueueModifyPrivateCloudOrganizationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerCreationAsync(setEnqueueLoadBalancerCreation: SetEnqueueLoadBalancerCreation, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerCreationResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    SetEnqueueLoadBalancerDeletionAsync(setEnqueueLoadBalancerDeletion: SetEnqueueLoadBalancerDeletion, options?: ISoapExOptions): Promise<[result: SetEnqueueLoadBalancerDeletionResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
    GetLoadBalancersAsync(getLoadBalancers: GetLoadBalancers, options?: ISoapExOptions): Promise<[result: GetLoadBalancersResponse, rawResponse: any, soapHeader: any, rawRequest: any]>;
}

/** Create ArubacloudSvcClient */
export function createClientAsync(...args: Parameters<typeof soapCreateClientAsync>): Promise<ArubacloudSvcClient> {
    return soapCreateClientAsync(args[0], args[1], args[2]) as any;
}
